{
  "title": "个人技术博客",
  "description": "使用 Next.js 和 Contentlayer 构建的现代化技术博客，支持 Markdown 写作、代码高亮、标签分类等功能",
  "technologies": [
    "Next.js",
    "TypeScript",
    "Tailwind CSS",
    "Contentlayer",
    "MDX",
    "Vercel"
  ],
  "githubUrl": "https://github.com/zhangsan/tech-blog",
  "liveUrl": "https://zhangsan.dev",
  "imageUrl": "/images/projects/tech-blog.jpg",
  "featured": true,
  "startDate": "2023-10-01T00:00:00.000Z",
  "endDate": "2024-01-15T00:00:00.000Z",
  "status": "completed",
  "body": {
    "raw": "\n# 个人技术博客\n\n这是我的个人技术博客项目，用于分享学习心得、技术文章和项目经验。项目采用现代化的技术栈，注重性能、SEO 和用户体验。\n\n## 项目背景\n\n作为一名开发者，我一直想要一个属于自己的技术博客来记录学习过程和分享技术心得。市面上虽然有很多博客平台，但都有各自的限制。因此，我决定从零开始构建一个完全符合自己需求的技术博客。\n\n## 技术选型\n\n### 前端框架\n- **Next.js 14**: 选择 Next.js 是因为它提供了出色的 SSR/SSG 支持，对 SEO 友好\n- **App Router**: 使用最新的 App Router 来获得更好的开发体验\n- **TypeScript**: 提供类型安全，减少运行时错误\n\n### 内容管理\n- **Contentlayer**: 将 Markdown 文件转换为类型安全的数据\n- **MDX**: 支持在 Markdown 中使用 React 组件\n- **Gray Matter**: 解析 Frontmatter 元数据\n\n### 样式系统\n- **Tailwind CSS**: 快速构建响应式 UI\n- **Headless UI**: 无样式的可访问组件\n- **Lucide Icons**: 现代化的图标库\n\n### 部署和托管\n- **Vercel**: 零配置部署，完美支持 Next.js\n- **GitHub**: 代码托管和版本控制\n\n## 核心功能\n\n### 1. 文章管理系统\n- 支持 Markdown 和 MDX 格式\n- 自动生成文章摘要和阅读时间\n- 标签和分类系统\n- 文章搜索和筛选\n\n### 2. 响应式设计\n- 移动端优先的设计理念\n- 适配各种屏幕尺寸\n- 暗色模式支持\n\n### 3. SEO 优化\n- 自动生成 sitemap\n- 结构化数据标记\n- Open Graph 和 Twitter Card 支持\n- 页面性能优化\n\n### 4. 代码高亮\n- 支持多种编程语言\n- 自定义主题\n- 代码复制功能\n- 行号显示\n\n## 项目架构\n\n```\ntech-blog/\n├── app/                    # Next.js App Router\n│   ├── (blog)/            # 博客路由组\n│   │   ├── articles/      # 文章页面\n│   │   ├── tags/          # 标签页面\n│   │   └── categories/    # 分类页面\n│   ├── components/        # React 组件\n│   └── globals.css        # 全局样式\n├── content/               # Markdown 内容\n│   ├── articles/          # 文章\n│   ├── pages/             # 页面\n│   └── authors/           # 作者信息\n├── lib/                   # 工具函数\n├── public/                # 静态资源\n└── contentlayer.config.ts # Contentlayer 配置\n```\n\n## 开发过程\n\n### 第一阶段：基础架构 (2023.10 - 2023.11)\n- 搭建 Next.js 项目基础结构\n- 配置 Contentlayer 和 MDX\n- 实现基本的文章展示功能\n- 设计响应式布局\n\n### 第二阶段：功能完善 (2023.11 - 2023.12)\n- 实现标签和分类系统\n- 添加搜索和筛选功能\n- 优化 SEO 和性能\n- 添加代码高亮和复制功能\n\n### 第三阶段：用户体验优化 (2023.12 - 2024.01)\n- 实现暗色模式\n- 添加阅读进度条\n- 优化移动端体验\n- 添加评论系统集成\n\n## 技术亮点\n\n### 1. 类型安全的内容管理\n使用 Contentlayer 将 Markdown 文件转换为 TypeScript 类型：\n\n```typescript\nexport const Article = defineDocumentType(() => ({\n  name: 'Article',\n  filePathPattern: `articles/**/*.md`,\n  contentType: 'markdown',\n  fields: {\n    title: { type: 'string', required: true },\n    excerpt: { type: 'string', required: true },\n    publishedAt: { type: 'date', required: true },\n    tags: { type: 'list', of: { type: 'string' } },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.md$/, ''),\n    },\n    readingTime: {\n      type: 'json',\n      resolve: (doc) => readingTime(doc.body.raw),\n    },\n  },\n}))\n```\n\n### 2. 性能优化\n- 使用 Next.js 的 Image 组件优化图片加载\n- 实现代码分割和懒加载\n- 静态生成 (SSG) 提升页面加载速度\n- 使用 ISR (Incremental Static Regeneration) 更新内容\n\n### 3. 可访问性\n- 语义化 HTML 结构\n- 键盘导航支持\n- 屏幕阅读器友好\n- 颜色对比度优化\n\n## 性能指标\n\n通过 Lighthouse 测试，网站在各项指标上都达到了优秀水平：\n\n- **Performance**: 98/100\n- **Accessibility**: 100/100\n- **Best Practices**: 100/100\n- **SEO**: 100/100\n\n## 遇到的挑战\n\n### 1. Contentlayer 版本兼容性\n在项目初期，Contentlayer 与 Next.js 14 存在兼容性问题。通过研究源码和社区讨论，最终找到了解决方案。\n\n### 2. MDX 组件样式\n在 MDX 中使用自定义组件时，样式隔离是一个挑战。通过使用 CSS Modules 和 Tailwind CSS 的组合解决了这个问题。\n\n### 3. 搜索功能实现\n最初考虑使用 Algolia 等第三方搜索服务，但考虑到成本和复杂性，最终选择了客户端搜索的方案。\n\n## 学到的经验\n\n1. **内容优先**: 好的内容是博客成功的关键\n2. **性能重要**: 快速的加载速度直接影响用户体验\n3. **SEO 基础**: 良好的 SEO 实践有助于内容传播\n4. **持续迭代**: 根据用户反馈不断改进产品\n\n## 未来计划\n\n- **评论系统**: 集成 Giscus 或 Utterances\n- **RSS 订阅**: 生成 RSS feed\n- **全文搜索**: 使用 Algolia 或 Elasticsearch\n- **数据分析**: 集成 Google Analytics\n- **多语言支持**: 支持中英文切换\n- **PWA 支持**: 添加离线阅读功能\n\n## 总结\n\n这个技术博客项目不仅是我技术能力的展示，更是我学习和成长的记录。通过构建这个项目，我深入学习了 Next.js、Contentlayer、TypeScript 等技术，也对现代 Web 开发有了更深的理解。\n\n项目的成功不仅在于技术实现，更在于它真正解决了我的需求——拥有一个完全可控、性能优秀、用户体验良好的技术博客平台。\n\n如果你对这个项目感兴趣，欢迎查看源码或与我交流讨论！\n",
    "html": "<h1>个人技术博客</h1>\n<p>这是我的个人技术博客项目，用于分享学习心得、技术文章和项目经验。项目采用现代化的技术栈，注重性能、SEO 和用户体验。</p>\n<h2>项目背景</h2>\n<p>作为一名开发者，我一直想要一个属于自己的技术博客来记录学习过程和分享技术心得。市面上虽然有很多博客平台，但都有各自的限制。因此，我决定从零开始构建一个完全符合自己需求的技术博客。</p>\n<h2>技术选型</h2>\n<h3>前端框架</h3>\n<ul>\n<li><strong>Next.js 14</strong>: 选择 Next.js 是因为它提供了出色的 SSR/SSG 支持，对 SEO 友好</li>\n<li><strong>App Router</strong>: 使用最新的 App Router 来获得更好的开发体验</li>\n<li><strong>TypeScript</strong>: 提供类型安全，减少运行时错误</li>\n</ul>\n<h3>内容管理</h3>\n<ul>\n<li><strong>Contentlayer</strong>: 将 Markdown 文件转换为类型安全的数据</li>\n<li><strong>MDX</strong>: 支持在 Markdown 中使用 React 组件</li>\n<li><strong>Gray Matter</strong>: 解析 Frontmatter 元数据</li>\n</ul>\n<h3>样式系统</h3>\n<ul>\n<li><strong>Tailwind CSS</strong>: 快速构建响应式 UI</li>\n<li><strong>Headless UI</strong>: 无样式的可访问组件</li>\n<li><strong>Lucide Icons</strong>: 现代化的图标库</li>\n</ul>\n<h3>部署和托管</h3>\n<ul>\n<li><strong>Vercel</strong>: 零配置部署，完美支持 Next.js</li>\n<li><strong>GitHub</strong>: 代码托管和版本控制</li>\n</ul>\n<h2>核心功能</h2>\n<h3>1. 文章管理系统</h3>\n<ul>\n<li>支持 Markdown 和 MDX 格式</li>\n<li>自动生成文章摘要和阅读时间</li>\n<li>标签和分类系统</li>\n<li>文章搜索和筛选</li>\n</ul>\n<h3>2. 响应式设计</h3>\n<ul>\n<li>移动端优先的设计理念</li>\n<li>适配各种屏幕尺寸</li>\n<li>暗色模式支持</li>\n</ul>\n<h3>3. SEO 优化</h3>\n<ul>\n<li>自动生成 sitemap</li>\n<li>结构化数据标记</li>\n<li>Open Graph 和 Twitter Card 支持</li>\n<li>页面性能优化</li>\n</ul>\n<h3>4. 代码高亮</h3>\n<ul>\n<li>支持多种编程语言</li>\n<li>自定义主题</li>\n<li>代码复制功能</li>\n<li>行号显示</li>\n</ul>\n<h2>项目架构</h2>\n<pre><code>tech-blog/\n├── app/                    # Next.js App Router\n│   ├── (blog)/            # 博客路由组\n│   │   ├── articles/      # 文章页面\n│   │   ├── tags/          # 标签页面\n│   │   └── categories/    # 分类页面\n│   ├── components/        # React 组件\n│   └── globals.css        # 全局样式\n├── content/               # Markdown 内容\n│   ├── articles/          # 文章\n│   ├── pages/             # 页面\n│   └── authors/           # 作者信息\n├── lib/                   # 工具函数\n├── public/                # 静态资源\n└── contentlayer.config.ts # Contentlayer 配置\n</code></pre>\n<h2>开发过程</h2>\n<h3>第一阶段：基础架构 (2023.10 - 2023.11)</h3>\n<ul>\n<li>搭建 Next.js 项目基础结构</li>\n<li>配置 Contentlayer 和 MDX</li>\n<li>实现基本的文章展示功能</li>\n<li>设计响应式布局</li>\n</ul>\n<h3>第二阶段：功能完善 (2023.11 - 2023.12)</h3>\n<ul>\n<li>实现标签和分类系统</li>\n<li>添加搜索和筛选功能</li>\n<li>优化 SEO 和性能</li>\n<li>添加代码高亮和复制功能</li>\n</ul>\n<h3>第三阶段：用户体验优化 (2023.12 - 2024.01)</h3>\n<ul>\n<li>实现暗色模式</li>\n<li>添加阅读进度条</li>\n<li>优化移动端体验</li>\n<li>添加评论系统集成</li>\n</ul>\n<h2>技术亮点</h2>\n<h3>1. 类型安全的内容管理</h3>\n<p>使用 Contentlayer 将 Markdown 文件转换为 TypeScript 类型：</p>\n<pre><code class=\"language-typescript\">export const Article = defineDocumentType(() => ({\n  name: 'Article',\n  filePathPattern: `articles/**/*.md`,\n  contentType: 'markdown',\n  fields: {\n    title: { type: 'string', required: true },\n    excerpt: { type: 'string', required: true },\n    publishedAt: { type: 'date', required: true },\n    tags: { type: 'list', of: { type: 'string' } },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.md$/, ''),\n    },\n    readingTime: {\n      type: 'json',\n      resolve: (doc) => readingTime(doc.body.raw),\n    },\n  },\n}))\n</code></pre>\n<h3>2. 性能优化</h3>\n<ul>\n<li>使用 Next.js 的 Image 组件优化图片加载</li>\n<li>实现代码分割和懒加载</li>\n<li>静态生成 (SSG) 提升页面加载速度</li>\n<li>使用 ISR (Incremental Static Regeneration) 更新内容</li>\n</ul>\n<h3>3. 可访问性</h3>\n<ul>\n<li>语义化 HTML 结构</li>\n<li>键盘导航支持</li>\n<li>屏幕阅读器友好</li>\n<li>颜色对比度优化</li>\n</ul>\n<h2>性能指标</h2>\n<p>通过 Lighthouse 测试，网站在各项指标上都达到了优秀水平：</p>\n<ul>\n<li><strong>Performance</strong>: 98/100</li>\n<li><strong>Accessibility</strong>: 100/100</li>\n<li><strong>Best Practices</strong>: 100/100</li>\n<li><strong>SEO</strong>: 100/100</li>\n</ul>\n<h2>遇到的挑战</h2>\n<h3>1. Contentlayer 版本兼容性</h3>\n<p>在项目初期，Contentlayer 与 Next.js 14 存在兼容性问题。通过研究源码和社区讨论，最终找到了解决方案。</p>\n<h3>2. MDX 组件样式</h3>\n<p>在 MDX 中使用自定义组件时，样式隔离是一个挑战。通过使用 CSS Modules 和 Tailwind CSS 的组合解决了这个问题。</p>\n<h3>3. 搜索功能实现</h3>\n<p>最初考虑使用 Algolia 等第三方搜索服务，但考虑到成本和复杂性，最终选择了客户端搜索的方案。</p>\n<h2>学到的经验</h2>\n<ol>\n<li><strong>内容优先</strong>: 好的内容是博客成功的关键</li>\n<li><strong>性能重要</strong>: 快速的加载速度直接影响用户体验</li>\n<li><strong>SEO 基础</strong>: 良好的 SEO 实践有助于内容传播</li>\n<li><strong>持续迭代</strong>: 根据用户反馈不断改进产品</li>\n</ol>\n<h2>未来计划</h2>\n<ul>\n<li><strong>评论系统</strong>: 集成 Giscus 或 Utterances</li>\n<li><strong>RSS 订阅</strong>: 生成 RSS feed</li>\n<li><strong>全文搜索</strong>: 使用 Algolia 或 Elasticsearch</li>\n<li><strong>数据分析</strong>: 集成 Google Analytics</li>\n<li><strong>多语言支持</strong>: 支持中英文切换</li>\n<li><strong>PWA 支持</strong>: 添加离线阅读功能</li>\n</ul>\n<h2>总结</h2>\n<p>这个技术博客项目不仅是我技术能力的展示，更是我学习和成长的记录。通过构建这个项目，我深入学习了 Next.js、Contentlayer、TypeScript 等技术，也对现代 Web 开发有了更深的理解。</p>\n<p>项目的成功不仅在于技术实现，更在于它真正解决了我的需求——拥有一个完全可控、性能优秀、用户体验良好的技术博客平台。</p>\n<p>如果你对这个项目感兴趣，欢迎查看源码或与我交流讨论！</p>"
  },
  "_id": "projects/tech-blog.md",
  "_raw": {
    "sourceFilePath": "projects/tech-blog.md",
    "sourceFileName": "tech-blog.md",
    "sourceFileDir": "projects",
    "contentType": "markdown",
    "flattenedPath": "projects/tech-blog"
  },
  "type": "Project",
  "slug": "tech-blog",
  "url": "/projects/tech-blog"
}