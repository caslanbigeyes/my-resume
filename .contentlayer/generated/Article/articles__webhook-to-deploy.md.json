{
  "title": "GitHub Webhook 实现服务器自动化部署",
  "excerpt": "详细介绍如何使用 GitHub Webhook 实现代码推送后的自动化部署，包括服务器配置、脚本编写和 PM2 进程管理。",
  "publishedAt": "2024-02-01T00:00:00.000Z",
  "author": "hero",
  "category": "devops",
  "tags": [
    "webhook",
    "deployment",
    "github",
    "pm2",
    "automation"
  ],
  "featured": true,
  "published": true,
  "image": "/images/articles/webhook-deploy.jpg",
  "seoTitle": "GitHub Webhook 自动化部署完全指南 - 从配置到实践",
  "seoDescription": "学习如何配置 GitHub Webhook 实现自动化部署，包括服务器设置、安全配置和故障排除",
  "seoKeywords": [
    "GitHub Webhook",
    "自动化部署",
    "CI/CD",
    "服务器部署",
    "PM2"
  ],
  "body": {
    "raw": "\n# GitHub Webhook 实现服务器自动化部署\n\n## 概述\n\n自动化部署是现代软件开发中的重要环节，通过 GitHub Webhook 可以实现代码推送后的自动部署，大大提高开发效率。本文将详细介绍如何从零开始配置一个完整的自动化部署系统。\n\n## 部署架构\n\n```\nGitHub Repository → Webhook → 服务器接收 → 执行部署脚本 → 重启应用\n```\n\n## 第一步：服务器准备\n\n### 1. 购买和配置服务器\n\n#### 服务器选择\n- **推荐配置**: 2核4G内存，40G硬盘（适合中小型项目）\n- **操作系统**: Ubuntu 20.04 LTS 或 CentOS 7+\n- **云服务商**: 阿里云、腾讯云、AWS、DigitalOcean 等\n\n#### 基础环境安装\n```bash\n# 更新系统\nsudo apt update && sudo apt upgrade -y\n\n# 安装 Node.js (使用 NodeSource 仓库)\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# 安装 Git\nsudo apt install git -y\n\n# 安装 PM2 (进程管理器)\nsudo npm install -g pm2\n\n# 安装 Nginx (可选，用于反向代理)\nsudo apt install nginx -y\n```\n\n### 2. 域名配置\n\n#### DNS 解析设置\n```bash\n# A 记录配置示例\nType: A\nName: @\nValue: 你的服务器IP地址\nTTL: 600\n\n# 子域名配置 (可选)\nType: A\nName: api\nValue: 你的服务器IP地址\nTTL: 600\n```\n\n#### SSL 证书配置 (推荐使用 Let's Encrypt)\n```bash\n# 安装 Certbot\nsudo apt install certbot python3-certbot-nginx -y\n\n# 获取 SSL 证书\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n```\n\n### 3. 安全组配置\n\n#### 开放必要端口\n```bash\n# 开放 SSH (22)\nsudo ufw allow 22\n\n# 开放 HTTP (80) 和 HTTPS (443)\nsudo ufw allow 80\nsudo ufw allow 443\n\n# 开放 Webhook 端口 (3001)\nsudo ufw allow 3001\n\n# 开放应用端口 (3000)\nsudo ufw allow 3000\n\n# 启用防火墙\nsudo ufw enable\n```\n\n#### 云服务商安全组设置\n在云服务商控制台中配置安全组规则：\n- 入方向：开放 22, 80, 443, 3000, 3001 端口\n- 出方向：允许所有流量\n\n## 第二步：GitHub Webhook 配置\n\n### 1. 创建部署脚本\n\n#### 创建脚本目录\n```bash\n# 创建 hooks 目录\nsudo mkdir -p /var/www/hooks\nsudo chown $USER:$USER /var/www/hooks\n\n# 创建项目目录\nsudo mkdir -p /var/www/my-resume\nsudo chown $USER:$USER /var/www/my-resume\n```\n\n#### 部署脚本 (`/var/www/hooks/github-webhook.sh`)\n```bash\n#!/bin/bash\n\n# 设置错误时退出\nset -e\n\n# 日志文件\nLOG_FILE=\"/var/www/hooks/deploy.log\"\nPROJECT_DIR=\"/var/www/my-resume\"\n\n# 记录日志函数\nlog() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a \"$LOG_FILE\"\n}\n\nlog \"=== 开始部署 ===\"\n\n# 检查项目目录是否存在\nif [ ! -d \"$PROJECT_DIR\" ]; then\n    log \"项目目录不存在，正在克隆仓库...\"\n    git clone https://github.com/your-username/my-resume.git \"$PROJECT_DIR\"\n    cd \"$PROJECT_DIR\"\nelse\n    cd \"$PROJECT_DIR\" || { log \"进入项目目录失败\"; exit 1; }\nfi\n\nlog \"拉取最新代码...\"\ngit fetch || { log \"git fetch 失败\"; exit 1; }\ngit reset --hard origin/main || { log \"git reset 失败\"; exit 1; }\ngit pull origin main || { log \"git pull 失败\"; exit 1; }\n\nlog \"安装依赖...\"\nnpm install --legacy-peer-deps || { log \"npm install 失败\"; exit 1; }\n\nlog \"构建项目...\"\nnpm run build || { log \"npm run build 失败\"; exit 1; }\n\nlog \"重启 PM2 服务...\"\npm2 restart my-resume || {\n    log \"PM2 重启失败，尝试启动新实例...\"\n    pm2 start npm --name my-resume -- run start\n}\n\nlog \"清理旧的构建文件...\"\nfind \"$PROJECT_DIR\" -name \"node_modules\" -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true\n\nlog \"=== 部署完成 ===\"\n```\n\n#### 设置脚本权限\n```bash\nchmod +x /var/www/hooks/github-webhook.sh\n```\n### 2. Webhook 服务器\n\n#### 创建 Webhook 服务 (`/var/www/hooks/webhook.js`)\n```javascript\nconst express = require('express');\nconst crypto = require('crypto');\nconst { exec } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\nconst SECRET = process.env.WEBHOOK_SECRET || 'your-webhook-secret';\nconst LOG_FILE = '/var/www/hooks/webhook.log';\n\n// 中间件\napp.use(express.json({ limit: '1mb' }));\napp.use(express.urlencoded({ extended: true }));\n\n// 日志函数\nconst log = (message) => {\n    const timestamp = new Date().toISOString();\n    const logMessage = `${timestamp} - ${message}\\n`;\n    console.log(logMessage.trim());\n    fs.appendFileSync(LOG_FILE, logMessage);\n};\n\n// 验证 GitHub Webhook 签名\nconst verifySignature = (payload, signature) => {\n    if (!signature) return false;\n\n    const hmac = crypto.createHmac('sha256', SECRET);\n    const digest = 'sha256=' + hmac.update(payload).digest('hex');\n\n    return crypto.timingSafeEqual(\n        Buffer.from(signature),\n        Buffer.from(digest)\n    );\n};\n\n// Webhook 端点\napp.post('/webhook', (req, res) => {\n    const signature = req.headers['x-hub-signature-256'];\n    const payload = JSON.stringify(req.body);\n\n    // 验证签名（生产环境必须）\n    if (SECRET && !verifySignature(payload, signature)) {\n        log('❌ 签名验证失败');\n        return res.status(401).send('Unauthorized');\n    }\n\n    // 检查是否是 push 事件到 main 分支\n    if (req.body.ref !== 'refs/heads/main') {\n        log(`ℹ️ 忽略非 main 分支的推送: ${req.body.ref}`);\n        return res.status(200).send('Ignored: Not main branch');\n    }\n\n    log('🚀 收到 GitHub Webhook，开始部署...');\n\n    // 执行部署脚本\n    const deployScript = '/var/www/hooks/github-webhook.sh';\n    const child = exec(`bash ${deployScript}`, {\n        cwd: '/var/www/hooks',\n        timeout: 300000 // 5分钟超时\n    });\n\n    let output = '';\n\n    child.stdout.on('data', (data) => {\n        output += data;\n        log(`📝 ${data.trim()}`);\n    });\n\n    child.stderr.on('data', (data) => {\n        output += data;\n        log(`⚠️ ${data.trim()}`);\n    });\n\n    child.on('close', (code) => {\n        if (code === 0) {\n            log('✅ 部署成功完成');\n            res.status(200).send('Deployment successful');\n        } else {\n            log(`❌ 部署失败，退出码: ${code}`);\n            res.status(500).send('Deployment failed');\n        }\n    });\n\n    child.on('error', (error) => {\n        log(`❌ 执行脚本时出错: ${error.message}`);\n        res.status(500).send('Script execution error');\n    });\n});\n\n// 健康检查端点\napp.get('/health', (req, res) => {\n    res.status(200).json({\n        status: 'ok',\n        timestamp: new Date().toISOString(),\n        uptime: process.uptime()\n    });\n});\n\n// 查看部署日志端点（可选）\napp.get('/logs', (req, res) => {\n    try {\n        const logs = fs.readFileSync(LOG_FILE, 'utf8');\n        res.type('text/plain').send(logs);\n    } catch (error) {\n        res.status(404).send('Log file not found');\n    }\n});\n\n// 错误处理中间件\napp.use((error, req, res, next) => {\n    log(`❌ 服务器错误: ${error.message}`);\n    res.status(500).send('Internal Server Error');\n});\n\n// 启动服务器\napp.listen(PORT, '0.0.0.0', () => {\n    log(`🌐 Webhook 服务器运行在端口 ${PORT}`);\n});\n\n// 优雅关闭\nprocess.on('SIGTERM', () => {\n    log('📴 收到 SIGTERM 信号，正在关闭服务器...');\n    process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n    log('📴 收到 SIGINT 信号，正在关闭服务器...');\n    process.exit(0);\n});\n```\n\n#### 安装依赖\n```bash\ncd /var/www/hooks\nnpm init -y\nnpm install express\n```\n\n\n### 3. GitHub 仓库配置\n\n#### 在 GitHub 中设置 Webhook\n1. 进入你的 GitHub 仓库\n2. 点击 `Settings` → `Webhooks` → `Add webhook`\n3. 配置 Webhook：\n   ```\n   Payload URL: http://your-domain.com:3001/webhook\n   Content type: application/json\n   Secret: your-webhook-secret (与服务器中的 SECRET 一致)\n   Events: Just the push event\n   Active: ✓\n   ```\n\n#### 生成访问令牌（如果是私有仓库）\n```bash\n# 在服务器上配置 Git 凭据\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your-email@example.com\"\n\n# 使用 Personal Access Token\ngit config --global credential.helper store\necho \"https://username:token@github.com\" > ~/.git-credentials\n```\n\n## 第三步：启动服务\n\n### 1. 启动 Webhook 服务\n```bash\ncd /var/www/hooks\n\n# 设置环境变量\nexport WEBHOOK_SECRET=\"your-webhook-secret\"\nexport PORT=3001\n\n# 使用 PM2 启动 Webhook 服务\npm2 start webhook.js --name webhook --env production\n\n# 查看服务状态\npm2 status\npm2 logs webhook\n```\n\n### 2. 启动 Next.js 应用\n\n#### 首次部署\n```bash\n# 克隆项目（如果还没有）\ncd /var/www\ngit clone https://github.com/your-username/my-resume.git\n\n# 进入项目目录\ncd my-resume\n\n# 安装依赖\nnpm install --legacy-peer-deps\n\n# 构建项目\nnpm run build\n\n# 使用 PM2 启动应用\npm2 start npm --name my-resume -- run start\n\n# 设置开机自启\npm2 startup\npm2 save\n```\n\n#### PM2 配置文件（推荐）\n创建 `ecosystem.config.js`：\n```javascript\nmodule.exports = {\n  apps: [\n    {\n      name: 'my-resume',\n      script: 'npm',\n      args: 'run start',\n      cwd: '/var/www/my-resume',\n      instances: 1,\n      autorestart: true,\n      watch: false,\n      max_memory_restart: '1G',\n      env: {\n        NODE_ENV: 'production',\n        PORT: 3000\n      },\n      error_file: '/var/www/logs/my-resume-error.log',\n      out_file: '/var/www/logs/my-resume-out.log',\n      log_file: '/var/www/logs/my-resume.log'\n    },\n    {\n      name: 'webhook',\n      script: '/var/www/hooks/webhook.js',\n      cwd: '/var/www/hooks',\n      instances: 1,\n      autorestart: true,\n      watch: false,\n      env: {\n        NODE_ENV: 'production',\n        PORT: 3001,\n        WEBHOOK_SECRET: 'your-webhook-secret'\n      },\n      error_file: '/var/www/logs/webhook-error.log',\n      out_file: '/var/www/logs/webhook-out.log',\n      log_file: '/var/www/logs/webhook.log'\n    }\n  ]\n};\n```\n\n使用配置文件启动：\n```bash\n# 创建日志目录\nsudo mkdir -p /var/www/logs\nsudo chown $USER:$USER /var/www/logs\n\n# 启动所有服务\npm2 start ecosystem.config.js\n\n# 保存配置\npm2 save\n```\n\n## 第四步：Nginx 反向代理配置（推荐）\n\n### Nginx 配置文件\n创建 `/etc/nginx/sites-available/my-resume`：\n```nginx\nserver {\n    listen 80;\n    server_name your-domain.com www.your-domain.com;\n\n    # 重定向到 HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name your-domain.com www.your-domain.com;\n\n    # SSL 证书配置\n    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;\n\n    # SSL 安全配置\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # 主应用代理\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    # Webhook 代理\n    location /webhook {\n        proxy_pass http://localhost:3001;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # 限制访问（可选）\n        # allow 140.82.112.0/20;  # GitHub IP 范围\n        # deny all;\n    }\n\n    # 静态文件缓存\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        proxy_pass http://localhost:3000;\n    }\n}\n```\n\n### 启用配置\n```bash\n# 创建软链接\nsudo ln -s /etc/nginx/sites-available/my-resume /etc/nginx/sites-enabled/\n\n# 测试配置\nsudo nginx -t\n\n# 重启 Nginx\nsudo systemctl restart nginx\n```\n\n## 第五步：监控和日志\n\n### 1. 日志管理\n```bash\n# 查看应用日志\npm2 logs my-resume\n\n# 查看 Webhook 日志\npm2 logs webhook\n\n# 查看部署日志\ntail -f /var/www/hooks/deploy.log\n\n# 查看 Nginx 日志\nsudo tail -f /var/log/nginx/access.log\nsudo tail -f /var/log/nginx/error.log\n```\n\n### 2. 监控脚本\n创建 `/var/www/hooks/monitor.sh`：\n```bash\n#!/bin/bash\n\n# 检查服务状态\ncheck_service() {\n    local service_name=$1\n    local port=$2\n\n    if pm2 list | grep -q \"$service_name.*online\"; then\n        echo \"✅ $service_name 运行正常\"\n    else\n        echo \"❌ $service_name 未运行，正在重启...\"\n        pm2 restart \"$service_name\"\n    fi\n\n    if netstat -tuln | grep -q \":$port \"; then\n        echo \"✅ 端口 $port 正常监听\"\n    else\n        echo \"❌ 端口 $port 未监听\"\n    fi\n}\n\necho \"=== 服务监控报告 $(date) ===\"\ncheck_service \"my-resume\" 3000\ncheck_service \"webhook\" 3001\n\n# 检查磁盘空间\ndf -h | grep -E \"(/$|/var)\" | awk '{print \"💾 磁盘使用: \" $5 \" (\" $1 \")\"}'\n\n# 检查内存使用\nfree -h | grep Mem | awk '{print \"🧠 内存使用: \" $3 \"/\" $2}'\n\necho \"==========================\"\n```\n\n设置定时监控：\n```bash\nchmod +x /var/www/hooks/monitor.sh\n\n# 添加到 crontab\ncrontab -e\n# 添加以下行（每5分钟检查一次）\n*/5 * * * * /var/www/hooks/monitor.sh >> /var/www/logs/monitor.log 2>&1\n```\n\n## 故障排除\n\n### 常见问题及解决方案\n\n#### 1. Webhook 未触发\n```bash\n# 检查 Webhook 服务状态\npm2 status webhook\npm2 logs webhook\n\n# 检查端口是否开放\nsudo ufw status\nnetstat -tuln | grep 3001\n\n# 测试 Webhook 端点\ncurl -X POST http://localhost:3001/webhook \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"ref\":\"refs/heads/main\"}'\n```\n\n#### 2. 部署脚本失败\n```bash\n# 手动执行部署脚本\nbash /var/www/hooks/github-webhook.sh\n\n# 检查权限\nls -la /var/www/hooks/github-webhook.sh\nchmod +x /var/www/hooks/github-webhook.sh\n\n# 检查 Git 配置\ncd /var/www/my-resume\ngit status\ngit remote -v\n```\n\n#### 3. 应用无法启动\n```bash\n# 检查应用日志\npm2 logs my-resume\n\n# 手动启动测试\ncd /var/www/my-resume\nnpm run build\nnpm run start\n\n# 检查端口占用\nnetstat -tuln | grep 3000\nlsof -i :3000\n```\n\n#### 4. 内存不足\n```bash\n# 检查内存使用\nfree -h\npm2 monit\n\n# 重启应用释放内存\npm2 restart all\n\n# 增加 swap 空间\nsudo fallocate -l 2G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\n```\n\n### 调试技巧\n\n#### 1. 启用详细日志\n```javascript\n// 在 webhook.js 中添加更多日志\napp.use((req, res, next) => {\n    log(`📥 ${req.method} ${req.path} - ${req.ip}`);\n    next();\n});\n```\n\n#### 2. 测试部署流程\n```bash\n# 创建测试脚本\ncat > /var/www/hooks/test-deploy.sh << 'EOF'\n#!/bin/bash\necho \"测试开始: $(date)\"\necho \"当前用户: $(whoami)\"\necho \"当前目录: $(pwd)\"\necho \"Git 状态:\"\ncd /var/www/my-resume && git status\necho \"Node 版本: $(node --version)\"\necho \"NPM 版本: $(npm --version)\"\necho \"PM2 状态:\"\npm2 status\necho \"测试结束: $(date)\"\nEOF\n\nchmod +x /var/www/hooks/test-deploy.sh\nbash /var/www/hooks/test-deploy.sh\n```\n\n## 安全最佳实践\n\n### 1. 访问控制\n```bash\n# 限制 SSH 访问\nsudo vim /etc/ssh/sshd_config\n# 添加或修改：\n# PermitRootLogin no\n# PasswordAuthentication no\n# PubkeyAuthentication yes\n\n# 重启 SSH 服务\nsudo systemctl restart ssh\n```\n\n### 2. 防火墙配置\n```bash\n# 只开放必要端口\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow 22    # SSH\nsudo ufw allow 80    # HTTP\nsudo ufw allow 443   # HTTPS\nsudo ufw enable\n```\n\n### 3. 定期备份\n```bash\n# 创建备份脚本\ncat > /var/www/hooks/backup.sh << 'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/var/backups/my-resume\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# 备份代码\ntar -czf \"$BACKUP_DIR/code_$DATE.tar.gz\" -C /var/www my-resume\n\n# 备份配置\ntar -czf \"$BACKUP_DIR/config_$DATE.tar.gz\" -C /var/www hooks\n\n# 清理旧备份（保留7天）\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +7 -delete\n\necho \"备份完成: $DATE\"\nEOF\n\nchmod +x /var/www/hooks/backup.sh\n\n# 添加到定时任务（每天凌晨2点备份）\ncrontab -e\n# 添加：0 2 * * * /var/www/hooks/backup.sh >> /var/www/logs/backup.log 2>&1\n```\n\n### 4. 环境变量管理\n```bash\n# 创建环境变量文件\ncat > /var/www/hooks/.env << 'EOF'\nNODE_ENV=production\nWEBHOOK_SECRET=your-super-secret-key\nPORT=3001\nLOG_LEVEL=info\nEOF\n\n# 设置权限\nchmod 600 /var/www/hooks/.env\n\n# 在 webhook.js 中使用\nrequire('dotenv').config();\n```\n\n## 性能优化\n\n### 1. 应用优化\n```javascript\n// 在 next.config.js 中添加\nmodule.exports = {\n  compress: true,\n  poweredByHeader: false,\n  generateEtags: false,\n  httpAgentOptions: {\n    keepAlive: true,\n  },\n}\n```\n\n### 2. 服务器优化\n```bash\n# 调整系统参数\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# PM2 集群模式\npm2 start ecosystem.config.js --env production\n```\n\n## 总结\n\n通过以上配置，你已经建立了一个完整的自动化部署系统：\n\n1. ✅ **服务器环境** - Node.js、Git、PM2、Nginx\n2. ✅ **Webhook 服务** - 接收 GitHub 推送事件\n3. ✅ **部署脚本** - 自动拉取代码、构建、重启\n4. ✅ **反向代理** - Nginx 配置 SSL 和负载均衡\n5. ✅ **监控日志** - 完整的日志记录和监控\n6. ✅ **安全配置** - 防火墙、访问控制、备份\n\n### 下一步建议\n\n- 考虑使用 Docker 容器化部署\n- 集成 CI/CD 工具如 GitHub Actions\n- 添加自动化测试流程\n- 实现蓝绿部署或滚动更新\n- 配置监控告警系统\n\n这套方案适用于中小型项目的自动化部署，可以根据实际需求进行调整和扩展。\n",
    "html": "<h1>GitHub Webhook 实现服务器自动化部署</h1>\n<h2>概述</h2>\n<p>自动化部署是现代软件开发中的重要环节，通过 GitHub Webhook 可以实现代码推送后的自动部署，大大提高开发效率。本文将详细介绍如何从零开始配置一个完整的自动化部署系统。</p>\n<h2>部署架构</h2>\n<pre><code>GitHub Repository → Webhook → 服务器接收 → 执行部署脚本 → 重启应用\n</code></pre>\n<h2>第一步：服务器准备</h2>\n<h3>1. 购买和配置服务器</h3>\n<h4>服务器选择</h4>\n<ul>\n<li><strong>推荐配置</strong>: 2核4G内存，40G硬盘（适合中小型项目）</li>\n<li><strong>操作系统</strong>: Ubuntu 20.04 LTS 或 CentOS 7+</li>\n<li><strong>云服务商</strong>: 阿里云、腾讯云、AWS、DigitalOcean 等</li>\n</ul>\n<h4>基础环境安装</h4>\n<pre><code class=\"language-bash\"># 更新系统\nsudo apt update &#x26;&#x26; sudo apt upgrade -y\n\n# 安装 Node.js (使用 NodeSource 仓库)\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# 安装 Git\nsudo apt install git -y\n\n# 安装 PM2 (进程管理器)\nsudo npm install -g pm2\n\n# 安装 Nginx (可选，用于反向代理)\nsudo apt install nginx -y\n</code></pre>\n<h3>2. 域名配置</h3>\n<h4>DNS 解析设置</h4>\n<pre><code class=\"language-bash\"># A 记录配置示例\nType: A\nName: @\nValue: 你的服务器IP地址\nTTL: 600\n\n# 子域名配置 (可选)\nType: A\nName: api\nValue: 你的服务器IP地址\nTTL: 600\n</code></pre>\n<h4>SSL 证书配置 (推荐使用 Let's Encrypt)</h4>\n<pre><code class=\"language-bash\"># 安装 Certbot\nsudo apt install certbot python3-certbot-nginx -y\n\n# 获取 SSL 证书\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n</code></pre>\n<h3>3. 安全组配置</h3>\n<h4>开放必要端口</h4>\n<pre><code class=\"language-bash\"># 开放 SSH (22)\nsudo ufw allow 22\n\n# 开放 HTTP (80) 和 HTTPS (443)\nsudo ufw allow 80\nsudo ufw allow 443\n\n# 开放 Webhook 端口 (3001)\nsudo ufw allow 3001\n\n# 开放应用端口 (3000)\nsudo ufw allow 3000\n\n# 启用防火墙\nsudo ufw enable\n</code></pre>\n<h4>云服务商安全组设置</h4>\n<p>在云服务商控制台中配置安全组规则：</p>\n<ul>\n<li>入方向：开放 22, 80, 443, 3000, 3001 端口</li>\n<li>出方向：允许所有流量</li>\n</ul>\n<h2>第二步：GitHub Webhook 配置</h2>\n<h3>1. 创建部署脚本</h3>\n<h4>创建脚本目录</h4>\n<pre><code class=\"language-bash\"># 创建 hooks 目录\nsudo mkdir -p /var/www/hooks\nsudo chown $USER:$USER /var/www/hooks\n\n# 创建项目目录\nsudo mkdir -p /var/www/my-resume\nsudo chown $USER:$USER /var/www/my-resume\n</code></pre>\n<h4>部署脚本 (<code>/var/www/hooks/github-webhook.sh</code>)</h4>\n<pre><code class=\"language-bash\">#!/bin/bash\n\n# 设置错误时退出\nset -e\n\n# 日志文件\nLOG_FILE=\"/var/www/hooks/deploy.log\"\nPROJECT_DIR=\"/var/www/my-resume\"\n\n# 记录日志函数\nlog() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a \"$LOG_FILE\"\n}\n\nlog \"=== 开始部署 ===\"\n\n# 检查项目目录是否存在\nif [ ! -d \"$PROJECT_DIR\" ]; then\n    log \"项目目录不存在，正在克隆仓库...\"\n    git clone https://github.com/your-username/my-resume.git \"$PROJECT_DIR\"\n    cd \"$PROJECT_DIR\"\nelse\n    cd \"$PROJECT_DIR\" || { log \"进入项目目录失败\"; exit 1; }\nfi\n\nlog \"拉取最新代码...\"\ngit fetch || { log \"git fetch 失败\"; exit 1; }\ngit reset --hard origin/main || { log \"git reset 失败\"; exit 1; }\ngit pull origin main || { log \"git pull 失败\"; exit 1; }\n\nlog \"安装依赖...\"\nnpm install --legacy-peer-deps || { log \"npm install 失败\"; exit 1; }\n\nlog \"构建项目...\"\nnpm run build || { log \"npm run build 失败\"; exit 1; }\n\nlog \"重启 PM2 服务...\"\npm2 restart my-resume || {\n    log \"PM2 重启失败，尝试启动新实例...\"\n    pm2 start npm --name my-resume -- run start\n}\n\nlog \"清理旧的构建文件...\"\nfind \"$PROJECT_DIR\" -name \"node_modules\" -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true\n\nlog \"=== 部署完成 ===\"\n</code></pre>\n<h4>设置脚本权限</h4>\n<pre><code class=\"language-bash\">chmod +x /var/www/hooks/github-webhook.sh\n</code></pre>\n<h3>2. Webhook 服务器</h3>\n<h4>创建 Webhook 服务 (<code>/var/www/hooks/webhook.js</code>)</h4>\n<pre><code class=\"language-javascript\">const express = require('express');\nconst crypto = require('crypto');\nconst { exec } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\nconst SECRET = process.env.WEBHOOK_SECRET || 'your-webhook-secret';\nconst LOG_FILE = '/var/www/hooks/webhook.log';\n\n// 中间件\napp.use(express.json({ limit: '1mb' }));\napp.use(express.urlencoded({ extended: true }));\n\n// 日志函数\nconst log = (message) => {\n    const timestamp = new Date().toISOString();\n    const logMessage = `${timestamp} - ${message}\\n`;\n    console.log(logMessage.trim());\n    fs.appendFileSync(LOG_FILE, logMessage);\n};\n\n// 验证 GitHub Webhook 签名\nconst verifySignature = (payload, signature) => {\n    if (!signature) return false;\n\n    const hmac = crypto.createHmac('sha256', SECRET);\n    const digest = 'sha256=' + hmac.update(payload).digest('hex');\n\n    return crypto.timingSafeEqual(\n        Buffer.from(signature),\n        Buffer.from(digest)\n    );\n};\n\n// Webhook 端点\napp.post('/webhook', (req, res) => {\n    const signature = req.headers['x-hub-signature-256'];\n    const payload = JSON.stringify(req.body);\n\n    // 验证签名（生产环境必须）\n    if (SECRET &#x26;&#x26; !verifySignature(payload, signature)) {\n        log('❌ 签名验证失败');\n        return res.status(401).send('Unauthorized');\n    }\n\n    // 检查是否是 push 事件到 main 分支\n    if (req.body.ref !== 'refs/heads/main') {\n        log(`ℹ️ 忽略非 main 分支的推送: ${req.body.ref}`);\n        return res.status(200).send('Ignored: Not main branch');\n    }\n\n    log('🚀 收到 GitHub Webhook，开始部署...');\n\n    // 执行部署脚本\n    const deployScript = '/var/www/hooks/github-webhook.sh';\n    const child = exec(`bash ${deployScript}`, {\n        cwd: '/var/www/hooks',\n        timeout: 300000 // 5分钟超时\n    });\n\n    let output = '';\n\n    child.stdout.on('data', (data) => {\n        output += data;\n        log(`📝 ${data.trim()}`);\n    });\n\n    child.stderr.on('data', (data) => {\n        output += data;\n        log(`⚠️ ${data.trim()}`);\n    });\n\n    child.on('close', (code) => {\n        if (code === 0) {\n            log('✅ 部署成功完成');\n            res.status(200).send('Deployment successful');\n        } else {\n            log(`❌ 部署失败，退出码: ${code}`);\n            res.status(500).send('Deployment failed');\n        }\n    });\n\n    child.on('error', (error) => {\n        log(`❌ 执行脚本时出错: ${error.message}`);\n        res.status(500).send('Script execution error');\n    });\n});\n\n// 健康检查端点\napp.get('/health', (req, res) => {\n    res.status(200).json({\n        status: 'ok',\n        timestamp: new Date().toISOString(),\n        uptime: process.uptime()\n    });\n});\n\n// 查看部署日志端点（可选）\napp.get('/logs', (req, res) => {\n    try {\n        const logs = fs.readFileSync(LOG_FILE, 'utf8');\n        res.type('text/plain').send(logs);\n    } catch (error) {\n        res.status(404).send('Log file not found');\n    }\n});\n\n// 错误处理中间件\napp.use((error, req, res, next) => {\n    log(`❌ 服务器错误: ${error.message}`);\n    res.status(500).send('Internal Server Error');\n});\n\n// 启动服务器\napp.listen(PORT, '0.0.0.0', () => {\n    log(`🌐 Webhook 服务器运行在端口 ${PORT}`);\n});\n\n// 优雅关闭\nprocess.on('SIGTERM', () => {\n    log('📴 收到 SIGTERM 信号，正在关闭服务器...');\n    process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n    log('📴 收到 SIGINT 信号，正在关闭服务器...');\n    process.exit(0);\n});\n</code></pre>\n<h4>安装依赖</h4>\n<pre><code class=\"language-bash\">cd /var/www/hooks\nnpm init -y\nnpm install express\n</code></pre>\n<h3>3. GitHub 仓库配置</h3>\n<h4>在 GitHub 中设置 Webhook</h4>\n<ol>\n<li>进入你的 GitHub 仓库</li>\n<li>点击 <code>Settings</code> → <code>Webhooks</code> → <code>Add webhook</code></li>\n<li>配置 Webhook：\n<pre><code>Payload URL: http://your-domain.com:3001/webhook\nContent type: application/json\nSecret: your-webhook-secret (与服务器中的 SECRET 一致)\nEvents: Just the push event\nActive: ✓\n</code></pre>\n</li>\n</ol>\n<h4>生成访问令牌（如果是私有仓库）</h4>\n<pre><code class=\"language-bash\"># 在服务器上配置 Git 凭据\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your-email@example.com\"\n\n# 使用 Personal Access Token\ngit config --global credential.helper store\necho \"https://username:token@github.com\" > ~/.git-credentials\n</code></pre>\n<h2>第三步：启动服务</h2>\n<h3>1. 启动 Webhook 服务</h3>\n<pre><code class=\"language-bash\">cd /var/www/hooks\n\n# 设置环境变量\nexport WEBHOOK_SECRET=\"your-webhook-secret\"\nexport PORT=3001\n\n# 使用 PM2 启动 Webhook 服务\npm2 start webhook.js --name webhook --env production\n\n# 查看服务状态\npm2 status\npm2 logs webhook\n</code></pre>\n<h3>2. 启动 Next.js 应用</h3>\n<h4>首次部署</h4>\n<pre><code class=\"language-bash\"># 克隆项目（如果还没有）\ncd /var/www\ngit clone https://github.com/your-username/my-resume.git\n\n# 进入项目目录\ncd my-resume\n\n# 安装依赖\nnpm install --legacy-peer-deps\n\n# 构建项目\nnpm run build\n\n# 使用 PM2 启动应用\npm2 start npm --name my-resume -- run start\n\n# 设置开机自启\npm2 startup\npm2 save\n</code></pre>\n<h4>PM2 配置文件（推荐）</h4>\n<p>创建 <code>ecosystem.config.js</code>：</p>\n<pre><code class=\"language-javascript\">module.exports = {\n  apps: [\n    {\n      name: 'my-resume',\n      script: 'npm',\n      args: 'run start',\n      cwd: '/var/www/my-resume',\n      instances: 1,\n      autorestart: true,\n      watch: false,\n      max_memory_restart: '1G',\n      env: {\n        NODE_ENV: 'production',\n        PORT: 3000\n      },\n      error_file: '/var/www/logs/my-resume-error.log',\n      out_file: '/var/www/logs/my-resume-out.log',\n      log_file: '/var/www/logs/my-resume.log'\n    },\n    {\n      name: 'webhook',\n      script: '/var/www/hooks/webhook.js',\n      cwd: '/var/www/hooks',\n      instances: 1,\n      autorestart: true,\n      watch: false,\n      env: {\n        NODE_ENV: 'production',\n        PORT: 3001,\n        WEBHOOK_SECRET: 'your-webhook-secret'\n      },\n      error_file: '/var/www/logs/webhook-error.log',\n      out_file: '/var/www/logs/webhook-out.log',\n      log_file: '/var/www/logs/webhook.log'\n    }\n  ]\n};\n</code></pre>\n<p>使用配置文件启动：</p>\n<pre><code class=\"language-bash\"># 创建日志目录\nsudo mkdir -p /var/www/logs\nsudo chown $USER:$USER /var/www/logs\n\n# 启动所有服务\npm2 start ecosystem.config.js\n\n# 保存配置\npm2 save\n</code></pre>\n<h2>第四步：Nginx 反向代理配置（推荐）</h2>\n<h3>Nginx 配置文件</h3>\n<p>创建 <code>/etc/nginx/sites-available/my-resume</code>：</p>\n<pre><code class=\"language-nginx\">server {\n    listen 80;\n    server_name your-domain.com www.your-domain.com;\n\n    # 重定向到 HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name your-domain.com www.your-domain.com;\n\n    # SSL 证书配置\n    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;\n\n    # SSL 安全配置\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # 主应用代理\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    # Webhook 代理\n    location /webhook {\n        proxy_pass http://localhost:3001;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # 限制访问（可选）\n        # allow 140.82.112.0/20;  # GitHub IP 范围\n        # deny all;\n    }\n\n    # 静态文件缓存\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        proxy_pass http://localhost:3000;\n    }\n}\n</code></pre>\n<h3>启用配置</h3>\n<pre><code class=\"language-bash\"># 创建软链接\nsudo ln -s /etc/nginx/sites-available/my-resume /etc/nginx/sites-enabled/\n\n# 测试配置\nsudo nginx -t\n\n# 重启 Nginx\nsudo systemctl restart nginx\n</code></pre>\n<h2>第五步：监控和日志</h2>\n<h3>1. 日志管理</h3>\n<pre><code class=\"language-bash\"># 查看应用日志\npm2 logs my-resume\n\n# 查看 Webhook 日志\npm2 logs webhook\n\n# 查看部署日志\ntail -f /var/www/hooks/deploy.log\n\n# 查看 Nginx 日志\nsudo tail -f /var/log/nginx/access.log\nsudo tail -f /var/log/nginx/error.log\n</code></pre>\n<h3>2. 监控脚本</h3>\n<p>创建 <code>/var/www/hooks/monitor.sh</code>：</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\n# 检查服务状态\ncheck_service() {\n    local service_name=$1\n    local port=$2\n\n    if pm2 list | grep -q \"$service_name.*online\"; then\n        echo \"✅ $service_name 运行正常\"\n    else\n        echo \"❌ $service_name 未运行，正在重启...\"\n        pm2 restart \"$service_name\"\n    fi\n\n    if netstat -tuln | grep -q \":$port \"; then\n        echo \"✅ 端口 $port 正常监听\"\n    else\n        echo \"❌ 端口 $port 未监听\"\n    fi\n}\n\necho \"=== 服务监控报告 $(date) ===\"\ncheck_service \"my-resume\" 3000\ncheck_service \"webhook\" 3001\n\n# 检查磁盘空间\ndf -h | grep -E \"(/$|/var)\" | awk '{print \"💾 磁盘使用: \" $5 \" (\" $1 \")\"}'\n\n# 检查内存使用\nfree -h | grep Mem | awk '{print \"🧠 内存使用: \" $3 \"/\" $2}'\n\necho \"==========================\"\n</code></pre>\n<p>设置定时监控：</p>\n<pre><code class=\"language-bash\">chmod +x /var/www/hooks/monitor.sh\n\n# 添加到 crontab\ncrontab -e\n# 添加以下行（每5分钟检查一次）\n*/5 * * * * /var/www/hooks/monitor.sh >> /var/www/logs/monitor.log 2>&#x26;1\n</code></pre>\n<h2>故障排除</h2>\n<h3>常见问题及解决方案</h3>\n<h4>1. Webhook 未触发</h4>\n<pre><code class=\"language-bash\"># 检查 Webhook 服务状态\npm2 status webhook\npm2 logs webhook\n\n# 检查端口是否开放\nsudo ufw status\nnetstat -tuln | grep 3001\n\n# 测试 Webhook 端点\ncurl -X POST http://localhost:3001/webhook \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"ref\":\"refs/heads/main\"}'\n</code></pre>\n<h4>2. 部署脚本失败</h4>\n<pre><code class=\"language-bash\"># 手动执行部署脚本\nbash /var/www/hooks/github-webhook.sh\n\n# 检查权限\nls -la /var/www/hooks/github-webhook.sh\nchmod +x /var/www/hooks/github-webhook.sh\n\n# 检查 Git 配置\ncd /var/www/my-resume\ngit status\ngit remote -v\n</code></pre>\n<h4>3. 应用无法启动</h4>\n<pre><code class=\"language-bash\"># 检查应用日志\npm2 logs my-resume\n\n# 手动启动测试\ncd /var/www/my-resume\nnpm run build\nnpm run start\n\n# 检查端口占用\nnetstat -tuln | grep 3000\nlsof -i :3000\n</code></pre>\n<h4>4. 内存不足</h4>\n<pre><code class=\"language-bash\"># 检查内存使用\nfree -h\npm2 monit\n\n# 重启应用释放内存\npm2 restart all\n\n# 增加 swap 空间\nsudo fallocate -l 2G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\n</code></pre>\n<h3>调试技巧</h3>\n<h4>1. 启用详细日志</h4>\n<pre><code class=\"language-javascript\">// 在 webhook.js 中添加更多日志\napp.use((req, res, next) => {\n    log(`📥 ${req.method} ${req.path} - ${req.ip}`);\n    next();\n});\n</code></pre>\n<h4>2. 测试部署流程</h4>\n<pre><code class=\"language-bash\"># 创建测试脚本\ncat > /var/www/hooks/test-deploy.sh &#x3C;&#x3C; 'EOF'\n#!/bin/bash\necho \"测试开始: $(date)\"\necho \"当前用户: $(whoami)\"\necho \"当前目录: $(pwd)\"\necho \"Git 状态:\"\ncd /var/www/my-resume &#x26;&#x26; git status\necho \"Node 版本: $(node --version)\"\necho \"NPM 版本: $(npm --version)\"\necho \"PM2 状态:\"\npm2 status\necho \"测试结束: $(date)\"\nEOF\n\nchmod +x /var/www/hooks/test-deploy.sh\nbash /var/www/hooks/test-deploy.sh\n</code></pre>\n<h2>安全最佳实践</h2>\n<h3>1. 访问控制</h3>\n<pre><code class=\"language-bash\"># 限制 SSH 访问\nsudo vim /etc/ssh/sshd_config\n# 添加或修改：\n# PermitRootLogin no\n# PasswordAuthentication no\n# PubkeyAuthentication yes\n\n# 重启 SSH 服务\nsudo systemctl restart ssh\n</code></pre>\n<h3>2. 防火墙配置</h3>\n<pre><code class=\"language-bash\"># 只开放必要端口\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow 22    # SSH\nsudo ufw allow 80    # HTTP\nsudo ufw allow 443   # HTTPS\nsudo ufw enable\n</code></pre>\n<h3>3. 定期备份</h3>\n<pre><code class=\"language-bash\"># 创建备份脚本\ncat > /var/www/hooks/backup.sh &#x3C;&#x3C; 'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/var/backups/my-resume\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# 备份代码\ntar -czf \"$BACKUP_DIR/code_$DATE.tar.gz\" -C /var/www my-resume\n\n# 备份配置\ntar -czf \"$BACKUP_DIR/config_$DATE.tar.gz\" -C /var/www hooks\n\n# 清理旧备份（保留7天）\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +7 -delete\n\necho \"备份完成: $DATE\"\nEOF\n\nchmod +x /var/www/hooks/backup.sh\n\n# 添加到定时任务（每天凌晨2点备份）\ncrontab -e\n# 添加：0 2 * * * /var/www/hooks/backup.sh >> /var/www/logs/backup.log 2>&#x26;1\n</code></pre>\n<h3>4. 环境变量管理</h3>\n<pre><code class=\"language-bash\"># 创建环境变量文件\ncat > /var/www/hooks/.env &#x3C;&#x3C; 'EOF'\nNODE_ENV=production\nWEBHOOK_SECRET=your-super-secret-key\nPORT=3001\nLOG_LEVEL=info\nEOF\n\n# 设置权限\nchmod 600 /var/www/hooks/.env\n\n# 在 webhook.js 中使用\nrequire('dotenv').config();\n</code></pre>\n<h2>性能优化</h2>\n<h3>1. 应用优化</h3>\n<pre><code class=\"language-javascript\">// 在 next.config.js 中添加\nmodule.exports = {\n  compress: true,\n  poweredByHeader: false,\n  generateEtags: false,\n  httpAgentOptions: {\n    keepAlive: true,\n  },\n}\n</code></pre>\n<h3>2. 服务器优化</h3>\n<pre><code class=\"language-bash\"># 调整系统参数\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# PM2 集群模式\npm2 start ecosystem.config.js --env production\n</code></pre>\n<h2>总结</h2>\n<p>通过以上配置，你已经建立了一个完整的自动化部署系统：</p>\n<ol>\n<li>✅ <strong>服务器环境</strong> - Node.js、Git、PM2、Nginx</li>\n<li>✅ <strong>Webhook 服务</strong> - 接收 GitHub 推送事件</li>\n<li>✅ <strong>部署脚本</strong> - 自动拉取代码、构建、重启</li>\n<li>✅ <strong>反向代理</strong> - Nginx 配置 SSL 和负载均衡</li>\n<li>✅ <strong>监控日志</strong> - 完整的日志记录和监控</li>\n<li>✅ <strong>安全配置</strong> - 防火墙、访问控制、备份</li>\n</ol>\n<h3>下一步建议</h3>\n<ul>\n<li>考虑使用 Docker 容器化部署</li>\n<li>集成 CI/CD 工具如 GitHub Actions</li>\n<li>添加自动化测试流程</li>\n<li>实现蓝绿部署或滚动更新</li>\n<li>配置监控告警系统</li>\n</ul>\n<p>这套方案适用于中小型项目的自动化部署，可以根据实际需求进行调整和扩展。</p>"
  },
  "_id": "articles/webhook-to-deploy.md",
  "_raw": {
    "sourceFilePath": "articles/webhook-to-deploy.md",
    "sourceFileName": "webhook-to-deploy.md",
    "sourceFileDir": "articles",
    "contentType": "markdown",
    "flattenedPath": "articles/webhook-to-deploy"
  },
  "type": "Article",
  "slug": "webhook-to-deploy",
  "readingTime": {
    "text": "15 min read",
    "minutes": 14.85,
    "time": 891000,
    "words": 2970
  },
  "url": "/articles/webhook-to-deploy"
}