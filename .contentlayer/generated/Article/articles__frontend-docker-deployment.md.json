{
  "title": "前端项目容器化部署完全指南：从 Docker 环境配置到生产部署",
  "excerpt": "详细介绍前端项目的 Docker 容器化部署流程，包括 Mac 环境下 Docker 配置、多阶段构建、Nginx 配置和生产环境部署最佳实践。",
  "publishedAt": "2025-01-21T00:00:00.000Z",
  "author": "li-lingfeng",
  "category": "frontend",
  "tags": [
    "docker",
    "frontend",
    "deployment",
    "nginx",
    "devops"
  ],
  "featured": true,
  "published": true,
  "image": "/images/articles/docker-frontend.jpg",
  "seoTitle": "前端 Docker 容器化部署指南 - 从开发到生产环境",
  "seoDescription": "学习前端项目 Docker 容器化部署，包括环境配置、多阶段构建、Nginx 优化和生产部署",
  "seoKeywords": [
    "Docker",
    "前端部署",
    "容器化",
    "Nginx",
    "DevOps",
    "CI/CD"
  ],
  "body": {
    "raw": "\n# 前端项目容器化部署完全指南\n\n在现代前端开发中，容器化部署已经成为标准实践。本文将详细介绍如何使用 Docker 对前端项目进行容器化打包和部署，包括 Mac 环境配置和生产环境最佳实践。\n\n## 🎯 为什么选择容器化部署？\n\n### 传统部署 vs 容器化部署\n\n| 传统部署方式 | 容器化部署 | 优势 |\n|------------|-----------|------|\n| 手动上传 dist 文件 | Docker 镜像部署 | 版本管理、回滚便捷 |\n| 服务器环境依赖 | 环境一致性 | 开发、测试、生产环境统一 |\n| 手动配置 Nginx | 配置即代码 | 配置版本化、可复现 |\n| 难以扩展 | 容器编排 | 水平扩展、负载均衡 |\n\n### 容器化的核心优势\n\n- **环境一致性**：开发、测试、生产环境完全一致\n- **快速部署**：一键部署，支持快速回滚\n- **资源隔离**：每个应用独立运行，互不影响\n- **易于扩展**：支持水平扩展和负载均衡\n- **版本管理**：镜像版本化，便于管理和回滚\n\n---\n\n## 🛠️ Mac 环境下 Docker 配置\n\n### 1. 安装 Docker Desktop\n\n#### 1.1 下载安装\n```bash\n# 方式一：官网下载\n# 访问 https://www.docker.com/products/docker-desktop\n\n# 方式二：使用 Homebrew 安装\nbrew install --cask docker\n```\n\n#### 1.2 启动和配置\n1. 启动 Docker Desktop 应用\n2. 完成初始化设置\n3. 登录 Docker Hub（可选）\n\n#### 1.3 验证安装\n```bash\n# 检查 Docker 版本\ndocker --version\ndocker-compose --version\n\n# 运行测试容器\ndocker run hello-world\n```\n\n### 2. Docker 性能优化配置\n\n#### 2.1 资源分配\n在 Docker Desktop 设置中调整：\n- **CPU**: 分配 2-4 核心\n- **内存**: 分配 4-8GB\n- **磁盘**: 根据需要调整虚拟磁盘大小\n\n#### 2.2 镜像加速配置\n```json\n// ~/.docker/daemon.json\n{\n  \"registry-mirrors\": [\n    \"https://docker.mirrors.ustc.edu.cn\",\n    \"https://hub-mirror.c.163.com\",\n    \"https://mirror.baidubce.com\"\n  ],\n  \"experimental\": false,\n  \"debug\": true\n}\n```\n\n#### 2.3 重启 Docker 服务\n```bash\n# 重启 Docker Desktop 或使用命令\nsudo systemctl restart docker  # Linux\n# macOS 需要重启 Docker Desktop 应用\n```\n\n---\n\n## 🚀 前端项目容器化实战\n\n### 3. 项目准备\n\n#### 3.1 创建示例项目\n```bash\n# 创建 Vue 项目\nnpm create vue@latest frontend-docker-demo\ncd frontend-docker-demo\nnpm install\n\n# 或创建 React 项目\nnpx create-react-app frontend-docker-demo\ncd frontend-docker-demo\n\n# 或创建 Next.js 项目\nnpx create-next-app@latest frontend-docker-demo\ncd frontend-docker-demo\n```\n\n#### 3.2 项目结构\n```\nfrontend-docker-demo/\n├── src/                 # 源代码\n├── public/             # 静态资源\n├── package.json        # 依赖配置\n├── nginx.conf          # Nginx 配置 (新增)\n├── Dockerfile          # Docker 配置 (新增)\n├── .dockerignore       # Docker 忽略文件 (新增)\n└── docker-compose.yml  # 容器编排 (可选)\n```\n\n### 4. Nginx 配置优化\n\n#### 4.1 创建 nginx.conf\n```nginx\n# nginx.conf\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n    \n    # 启用 gzip 压缩\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied expired no-cache no-store private auth;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/javascript\n        application/xml+rss\n        application/json;\n\n    # 静态资源缓存\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        try_files $uri =404;\n    }\n\n    # 主要路由配置\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        \n        # 解决 SPA 路由问题\n        try_files $uri $uri/ /index.html;\n        \n        # 安全头设置\n        add_header X-Frame-Options \"SAMEORIGIN\" always;\n        add_header X-XSS-Protection \"1; mode=block\" always;\n        add_header X-Content-Type-Options \"nosniff\" always;\n        add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n        add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n    }\n\n    # API 代理 (如果需要)\n    location /api/ {\n        proxy_pass http://backend-service:8080/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # 健康检查端点\n    location /health {\n        access_log off;\n        return 200 \"healthy\\n\";\n        add_header Content-Type text/plain;\n    }\n\n    # 错误页面\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n### 5. 多阶段 Dockerfile 构建\n\n#### 5.1 优化的 Dockerfile\n```dockerfile\n# Dockerfile\n# 第一阶段：构建阶段\nFROM node:18-alpine AS builder\n\n# 设置工作目录\nWORKDIR /app\n\n# 复制 package 文件\nCOPY package*.json ./\n\n# 安装依赖 (利用 Docker 缓存层)\nRUN npm ci --only=production\n\n# 复制源代码\nCOPY . .\n\n# 构建应用\nRUN npm run build\n\n# 第二阶段：生产阶段\nFROM nginx:1.21-alpine AS production\n\n# 安装必要工具\nRUN apk add --no-cache curl\n\n# 创建非 root 用户\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nextjs -u 1001\n\n# 复制 Nginx 配置\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\n# 复制构建产物\nCOPY --from=builder /app/dist /usr/share/nginx/html\n\n# 设置权限\nRUN chown -R nextjs:nodejs /usr/share/nginx/html && \\\n    chown -R nextjs:nodejs /var/cache/nginx && \\\n    chown -R nextjs:nodejs /var/log/nginx && \\\n    chown -R nextjs:nodejs /etc/nginx/conf.d\n\n# 创建 nginx.pid 文件目录\nRUN touch /var/run/nginx.pid && \\\n    chown -R nextjs:nodejs /var/run/nginx.pid\n\n# 切换到非 root 用户\nUSER nextjs\n\n# 暴露端口\nEXPOSE 80\n\n# 健康检查\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost/health || exit 1\n\n# 启动命令\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n#### 5.2 创建 .dockerignore\n```bash\n# .dockerignore\nnode_modules\nnpm-debug.log\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.cache\n.parcel-cache\n.DS_Store\ndist\nbuild\n```\n\n### 6. 构建和部署\n\n#### 6.1 本地构建测试\n```bash\n# 构建镜像\ndocker build -t frontend-app:latest .\n\n# 查看镜像\ndocker images\n\n# 运行容器\ndocker run -d \\\n  --name frontend-app \\\n  -p 8080:80 \\\n  frontend-app:latest\n\n# 测试访问\ncurl http://localhost:8080\nopen http://localhost:8080\n```\n\n#### 6.2 多环境构建\n```bash\n# 开发环境\ndocker build -t frontend-app:dev --target builder .\n\n# 生产环境\ndocker build -t frontend-app:prod --target production .\n\n# 带版本标签\ndocker build -t frontend-app:v1.0.0 .\n```\n\n---\n\n## 🔧 Docker Compose 编排\n\n### 7. 完整的开发环境\n\n#### 7.1 docker-compose.yml\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: production\n    ports:\n      - \"8080:80\"\n    environment:\n      - NODE_ENV=production\n    volumes:\n      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n\n  # 如果有后端服务\n  backend:\n    image: backend-api:latest\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://user:pass@db:5432/myapp\n    depends_on:\n      - db\n    restart: unless-stopped\n\n  # 数据库服务\n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=myapp\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\n  # Redis 缓存\n  redis:\n    image: redis:6-alpine\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  default:\n    driver: bridge\n```\n\n#### 7.2 使用 Docker Compose\n```bash\n# 启动所有服务\ndocker-compose up -d\n\n# 查看服务状态\ndocker-compose ps\n\n# 查看日志\ndocker-compose logs -f frontend\n\n# 重新构建并启动\ndocker-compose up --build -d\n\n# 停止服务\ndocker-compose down\n\n# 停止并删除数据卷\ndocker-compose down -v\n```\n\n---\n\n## 🚀 生产环境部署\n\n### 8. CI/CD 集成\n\n#### 8.1 GitHub Actions 示例\n```yaml\n# .github/workflows/deploy.yml\nname: Build and Deploy\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n    \n    - name: Login to Docker Hub\n      uses: docker/login-action@v2\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n    \n    - name: Build and push\n      uses: docker/build-push-action@v4\n      with:\n        context: .\n        push: true\n        tags: |\n          myapp/frontend:latest\n          myapp/frontend:${{ github.sha }}\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n    - name: Deploy to production\n      uses: appleboy/ssh-action@v0.1.5\n      with:\n        host: ${{ secrets.HOST }}\n        username: ${{ secrets.USERNAME }}\n        key: ${{ secrets.KEY }}\n        script: |\n          docker pull myapp/frontend:latest\n          docker stop frontend || true\n          docker rm frontend || true\n          docker run -d \\\n            --name frontend \\\n            -p 80:80 \\\n            --restart unless-stopped \\\n            myapp/frontend:latest\n```\n\n### 9. 性能优化和监控\n\n#### 9.1 镜像优化\n```dockerfile\n# 多阶段构建优化\nFROM node:18-alpine AS deps\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production && npm cache clean --force\n\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\nRUN npm run build\n\nFROM nginx:1.21-alpine AS runner\nCOPY --from=builder /app/dist /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n#### 9.2 监控配置\n```bash\n# 添加监控标签\ndocker run -d \\\n  --name frontend-app \\\n  --label \"monitoring=enabled\" \\\n  --label \"service=frontend\" \\\n  -p 8080:80 \\\n  frontend-app:latest\n\n# 查看容器资源使用\ndocker stats frontend-app\n\n# 查看容器日志\ndocker logs -f frontend-app\n```\n\n---\n\n## 🔍 故障排查和最佳实践\n\n### 10. 常见问题解决\n\n#### 10.1 路由问题\n```nginx\n# 解决 SPA 路由 404 问题\nlocation / {\n    try_files $uri $uri/ /index.html;\n}\n```\n\n#### 10.2 静态资源缓存\n```nginx\n# 静态资源长期缓存\nlocation ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n    expires 1y;\n    add_header Cache-Control \"public, immutable\";\n}\n```\n\n#### 10.3 容器调试\n```bash\n# 进入容器调试\ndocker exec -it frontend-app sh\n\n# 查看 Nginx 配置\ndocker exec frontend-app cat /etc/nginx/conf.d/default.conf\n\n# 查看容器内文件\ndocker exec frontend-app ls -la /usr/share/nginx/html\n```\n\n### 11. 安全最佳实践\n\n#### 11.1 安全配置\n```dockerfile\n# 使用非 root 用户\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nextjs -u 1001\nUSER nextjs\n\n# 最小化镜像\nFROM nginx:alpine\n# 只复制必要文件\nCOPY --from=builder /app/dist /usr/share/nginx/html\n```\n\n#### 11.2 环境变量管理\n```bash\n# 使用 .env 文件\ndocker run --env-file .env frontend-app:latest\n\n# 或在 docker-compose.yml 中\nenvironment:\n  - NODE_ENV=production\n  - API_URL=${API_URL}\n```\n\n---\n\n## 📊 总结\n\n### 容器化部署的优势\n1. **标准化部署流程**：一次配置，到处运行\n2. **环境一致性**：消除\"在我机器上能跑\"的问题\n3. **快速扩展**：支持水平扩展和负载均衡\n4. **版本管理**：镜像版本化，便于回滚\n5. **资源隔离**：提高系统稳定性\n\n### 最佳实践总结\n- 使用多阶段构建减小镜像体积\n- 合理配置 Nginx 提升性能\n- 实施健康检查确保服务可用性\n- 使用非 root 用户提升安全性\n- 配置适当的缓存策略\n- 集成 CI/CD 实现自动化部署\n\n通过本文的指导，您可以将前端项目成功容器化，实现从开发到生产的一致性部署体验。容器化不仅提升了部署效率，还为后续的微服务架构和云原生部署奠定了基础。🚀\n",
    "html": "<h1>前端项目容器化部署完全指南</h1>\n<p>在现代前端开发中，容器化部署已经成为标准实践。本文将详细介绍如何使用 Docker 对前端项目进行容器化打包和部署，包括 Mac 环境配置和生产环境最佳实践。</p>\n<h2>🎯 为什么选择容器化部署？</h2>\n<h3>传统部署 vs 容器化部署</h3>\n<p>| 传统部署方式 | 容器化部署 | 优势 |\n|------------|-----------|------|\n| 手动上传 dist 文件 | Docker 镜像部署 | 版本管理、回滚便捷 |\n| 服务器环境依赖 | 环境一致性 | 开发、测试、生产环境统一 |\n| 手动配置 Nginx | 配置即代码 | 配置版本化、可复现 |\n| 难以扩展 | 容器编排 | 水平扩展、负载均衡 |</p>\n<h3>容器化的核心优势</h3>\n<ul>\n<li><strong>环境一致性</strong>：开发、测试、生产环境完全一致</li>\n<li><strong>快速部署</strong>：一键部署，支持快速回滚</li>\n<li><strong>资源隔离</strong>：每个应用独立运行，互不影响</li>\n<li><strong>易于扩展</strong>：支持水平扩展和负载均衡</li>\n<li><strong>版本管理</strong>：镜像版本化，便于管理和回滚</li>\n</ul>\n<hr>\n<h2>🛠️ Mac 环境下 Docker 配置</h2>\n<h3>1. 安装 Docker Desktop</h3>\n<h4>1.1 下载安装</h4>\n<pre><code class=\"language-bash\"># 方式一：官网下载\n# 访问 https://www.docker.com/products/docker-desktop\n\n# 方式二：使用 Homebrew 安装\nbrew install --cask docker\n</code></pre>\n<h4>1.2 启动和配置</h4>\n<ol>\n<li>启动 Docker Desktop 应用</li>\n<li>完成初始化设置</li>\n<li>登录 Docker Hub（可选）</li>\n</ol>\n<h4>1.3 验证安装</h4>\n<pre><code class=\"language-bash\"># 检查 Docker 版本\ndocker --version\ndocker-compose --version\n\n# 运行测试容器\ndocker run hello-world\n</code></pre>\n<h3>2. Docker 性能优化配置</h3>\n<h4>2.1 资源分配</h4>\n<p>在 Docker Desktop 设置中调整：</p>\n<ul>\n<li><strong>CPU</strong>: 分配 2-4 核心</li>\n<li><strong>内存</strong>: 分配 4-8GB</li>\n<li><strong>磁盘</strong>: 根据需要调整虚拟磁盘大小</li>\n</ul>\n<h4>2.2 镜像加速配置</h4>\n<pre><code class=\"language-json\">// ~/.docker/daemon.json\n{\n  \"registry-mirrors\": [\n    \"https://docker.mirrors.ustc.edu.cn\",\n    \"https://hub-mirror.c.163.com\",\n    \"https://mirror.baidubce.com\"\n  ],\n  \"experimental\": false,\n  \"debug\": true\n}\n</code></pre>\n<h4>2.3 重启 Docker 服务</h4>\n<pre><code class=\"language-bash\"># 重启 Docker Desktop 或使用命令\nsudo systemctl restart docker  # Linux\n# macOS 需要重启 Docker Desktop 应用\n</code></pre>\n<hr>\n<h2>🚀 前端项目容器化实战</h2>\n<h3>3. 项目准备</h3>\n<h4>3.1 创建示例项目</h4>\n<pre><code class=\"language-bash\"># 创建 Vue 项目\nnpm create vue@latest frontend-docker-demo\ncd frontend-docker-demo\nnpm install\n\n# 或创建 React 项目\nnpx create-react-app frontend-docker-demo\ncd frontend-docker-demo\n\n# 或创建 Next.js 项目\nnpx create-next-app@latest frontend-docker-demo\ncd frontend-docker-demo\n</code></pre>\n<h4>3.2 项目结构</h4>\n<pre><code>frontend-docker-demo/\n├── src/                 # 源代码\n├── public/             # 静态资源\n├── package.json        # 依赖配置\n├── nginx.conf          # Nginx 配置 (新增)\n├── Dockerfile          # Docker 配置 (新增)\n├── .dockerignore       # Docker 忽略文件 (新增)\n└── docker-compose.yml  # 容器编排 (可选)\n</code></pre>\n<h3>4. Nginx 配置优化</h3>\n<h4>4.1 创建 nginx.conf</h4>\n<pre><code class=\"language-nginx\"># nginx.conf\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n    \n    # 启用 gzip 压缩\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied expired no-cache no-store private auth;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/javascript\n        application/xml+rss\n        application/json;\n\n    # 静态资源缓存\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        try_files $uri =404;\n    }\n\n    # 主要路由配置\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        \n        # 解决 SPA 路由问题\n        try_files $uri $uri/ /index.html;\n        \n        # 安全头设置\n        add_header X-Frame-Options \"SAMEORIGIN\" always;\n        add_header X-XSS-Protection \"1; mode=block\" always;\n        add_header X-Content-Type-Options \"nosniff\" always;\n        add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n        add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n    }\n\n    # API 代理 (如果需要)\n    location /api/ {\n        proxy_pass http://backend-service:8080/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # 健康检查端点\n    location /health {\n        access_log off;\n        return 200 \"healthy\\n\";\n        add_header Content-Type text/plain;\n    }\n\n    # 错误页面\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n</code></pre>\n<h3>5. 多阶段 Dockerfile 构建</h3>\n<h4>5.1 优化的 Dockerfile</h4>\n<pre><code class=\"language-dockerfile\"># Dockerfile\n# 第一阶段：构建阶段\nFROM node:18-alpine AS builder\n\n# 设置工作目录\nWORKDIR /app\n\n# 复制 package 文件\nCOPY package*.json ./\n\n# 安装依赖 (利用 Docker 缓存层)\nRUN npm ci --only=production\n\n# 复制源代码\nCOPY . .\n\n# 构建应用\nRUN npm run build\n\n# 第二阶段：生产阶段\nFROM nginx:1.21-alpine AS production\n\n# 安装必要工具\nRUN apk add --no-cache curl\n\n# 创建非 root 用户\nRUN addgroup -g 1001 -S nodejs &#x26;&#x26; \\\n    adduser -S nextjs -u 1001\n\n# 复制 Nginx 配置\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\n# 复制构建产物\nCOPY --from=builder /app/dist /usr/share/nginx/html\n\n# 设置权限\nRUN chown -R nextjs:nodejs /usr/share/nginx/html &#x26;&#x26; \\\n    chown -R nextjs:nodejs /var/cache/nginx &#x26;&#x26; \\\n    chown -R nextjs:nodejs /var/log/nginx &#x26;&#x26; \\\n    chown -R nextjs:nodejs /etc/nginx/conf.d\n\n# 创建 nginx.pid 文件目录\nRUN touch /var/run/nginx.pid &#x26;&#x26; \\\n    chown -R nextjs:nodejs /var/run/nginx.pid\n\n# 切换到非 root 用户\nUSER nextjs\n\n# 暴露端口\nEXPOSE 80\n\n# 健康检查\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost/health || exit 1\n\n# 启动命令\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>\n<h4>5.2 创建 .dockerignore</h4>\n<pre><code class=\"language-bash\"># .dockerignore\nnode_modules\nnpm-debug.log\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.cache\n.parcel-cache\n.DS_Store\ndist\nbuild\n</code></pre>\n<h3>6. 构建和部署</h3>\n<h4>6.1 本地构建测试</h4>\n<pre><code class=\"language-bash\"># 构建镜像\ndocker build -t frontend-app:latest .\n\n# 查看镜像\ndocker images\n\n# 运行容器\ndocker run -d \\\n  --name frontend-app \\\n  -p 8080:80 \\\n  frontend-app:latest\n\n# 测试访问\ncurl http://localhost:8080\nopen http://localhost:8080\n</code></pre>\n<h4>6.2 多环境构建</h4>\n<pre><code class=\"language-bash\"># 开发环境\ndocker build -t frontend-app:dev --target builder .\n\n# 生产环境\ndocker build -t frontend-app:prod --target production .\n\n# 带版本标签\ndocker build -t frontend-app:v1.0.0 .\n</code></pre>\n<hr>\n<h2>🔧 Docker Compose 编排</h2>\n<h3>7. 完整的开发环境</h3>\n<h4>7.1 docker-compose.yml</h4>\n<pre><code class=\"language-yaml\"># docker-compose.yml\nversion: '3.8'\n\nservices:\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: production\n    ports:\n      - \"8080:80\"\n    environment:\n      - NODE_ENV=production\n    volumes:\n      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n\n  # 如果有后端服务\n  backend:\n    image: backend-api:latest\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://user:pass@db:5432/myapp\n    depends_on:\n      - db\n    restart: unless-stopped\n\n  # 数据库服务\n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=myapp\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\n  # Redis 缓存\n  redis:\n    image: redis:6-alpine\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  default:\n    driver: bridge\n</code></pre>\n<h4>7.2 使用 Docker Compose</h4>\n<pre><code class=\"language-bash\"># 启动所有服务\ndocker-compose up -d\n\n# 查看服务状态\ndocker-compose ps\n\n# 查看日志\ndocker-compose logs -f frontend\n\n# 重新构建并启动\ndocker-compose up --build -d\n\n# 停止服务\ndocker-compose down\n\n# 停止并删除数据卷\ndocker-compose down -v\n</code></pre>\n<hr>\n<h2>🚀 生产环境部署</h2>\n<h3>8. CI/CD 集成</h3>\n<h4>8.1 GitHub Actions 示例</h4>\n<pre><code class=\"language-yaml\"># .github/workflows/deploy.yml\nname: Build and Deploy\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n    \n    - name: Login to Docker Hub\n      uses: docker/login-action@v2\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n    \n    - name: Build and push\n      uses: docker/build-push-action@v4\n      with:\n        context: .\n        push: true\n        tags: |\n          myapp/frontend:latest\n          myapp/frontend:${{ github.sha }}\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n    - name: Deploy to production\n      uses: appleboy/ssh-action@v0.1.5\n      with:\n        host: ${{ secrets.HOST }}\n        username: ${{ secrets.USERNAME }}\n        key: ${{ secrets.KEY }}\n        script: |\n          docker pull myapp/frontend:latest\n          docker stop frontend || true\n          docker rm frontend || true\n          docker run -d \\\n            --name frontend \\\n            -p 80:80 \\\n            --restart unless-stopped \\\n            myapp/frontend:latest\n</code></pre>\n<h3>9. 性能优化和监控</h3>\n<h4>9.1 镜像优化</h4>\n<pre><code class=\"language-dockerfile\"># 多阶段构建优化\nFROM node:18-alpine AS deps\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production &#x26;&#x26; npm cache clean --force\n\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\nRUN npm run build\n\nFROM nginx:1.21-alpine AS runner\nCOPY --from=builder /app/dist /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>\n<h4>9.2 监控配置</h4>\n<pre><code class=\"language-bash\"># 添加监控标签\ndocker run -d \\\n  --name frontend-app \\\n  --label \"monitoring=enabled\" \\\n  --label \"service=frontend\" \\\n  -p 8080:80 \\\n  frontend-app:latest\n\n# 查看容器资源使用\ndocker stats frontend-app\n\n# 查看容器日志\ndocker logs -f frontend-app\n</code></pre>\n<hr>\n<h2>🔍 故障排查和最佳实践</h2>\n<h3>10. 常见问题解决</h3>\n<h4>10.1 路由问题</h4>\n<pre><code class=\"language-nginx\"># 解决 SPA 路由 404 问题\nlocation / {\n    try_files $uri $uri/ /index.html;\n}\n</code></pre>\n<h4>10.2 静态资源缓存</h4>\n<pre><code class=\"language-nginx\"># 静态资源长期缓存\nlocation ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n    expires 1y;\n    add_header Cache-Control \"public, immutable\";\n}\n</code></pre>\n<h4>10.3 容器调试</h4>\n<pre><code class=\"language-bash\"># 进入容器调试\ndocker exec -it frontend-app sh\n\n# 查看 Nginx 配置\ndocker exec frontend-app cat /etc/nginx/conf.d/default.conf\n\n# 查看容器内文件\ndocker exec frontend-app ls -la /usr/share/nginx/html\n</code></pre>\n<h3>11. 安全最佳实践</h3>\n<h4>11.1 安全配置</h4>\n<pre><code class=\"language-dockerfile\"># 使用非 root 用户\nRUN addgroup -g 1001 -S nodejs &#x26;&#x26; \\\n    adduser -S nextjs -u 1001\nUSER nextjs\n\n# 最小化镜像\nFROM nginx:alpine\n# 只复制必要文件\nCOPY --from=builder /app/dist /usr/share/nginx/html\n</code></pre>\n<h4>11.2 环境变量管理</h4>\n<pre><code class=\"language-bash\"># 使用 .env 文件\ndocker run --env-file .env frontend-app:latest\n\n# 或在 docker-compose.yml 中\nenvironment:\n  - NODE_ENV=production\n  - API_URL=${API_URL}\n</code></pre>\n<hr>\n<h2>📊 总结</h2>\n<h3>容器化部署的优势</h3>\n<ol>\n<li><strong>标准化部署流程</strong>：一次配置，到处运行</li>\n<li><strong>环境一致性</strong>：消除\"在我机器上能跑\"的问题</li>\n<li><strong>快速扩展</strong>：支持水平扩展和负载均衡</li>\n<li><strong>版本管理</strong>：镜像版本化，便于回滚</li>\n<li><strong>资源隔离</strong>：提高系统稳定性</li>\n</ol>\n<h3>最佳实践总结</h3>\n<ul>\n<li>使用多阶段构建减小镜像体积</li>\n<li>合理配置 Nginx 提升性能</li>\n<li>实施健康检查确保服务可用性</li>\n<li>使用非 root 用户提升安全性</li>\n<li>配置适当的缓存策略</li>\n<li>集成 CI/CD 实现自动化部署</li>\n</ul>\n<p>通过本文的指导，您可以将前端项目成功容器化，实现从开发到生产的一致性部署体验。容器化不仅提升了部署效率，还为后续的微服务架构和云原生部署奠定了基础。🚀</p>"
  },
  "_id": "articles/frontend-docker-deployment.md",
  "_raw": {
    "sourceFilePath": "articles/frontend-docker-deployment.md",
    "sourceFileName": "frontend-docker-deployment.md",
    "sourceFileDir": "articles",
    "contentType": "markdown",
    "flattenedPath": "articles/frontend-docker-deployment"
  },
  "type": "Article",
  "slug": "frontend-docker-deployment",
  "readingTime": {
    "text": "11 min read",
    "minutes": 10.34,
    "time": 620400,
    "words": 2068
  },
  "url": "/articles/frontend-docker-deployment"
}