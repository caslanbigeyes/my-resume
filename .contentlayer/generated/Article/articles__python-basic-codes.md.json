{
  "title": "Python 机器学习入门指南：从 Jupyter 环境到 KNN 算法实战",
  "excerpt": "全面介绍 Python 机器学习基础知识，包括 Jupyter Notebook 使用、机器学习基本概念和 KNN 算法实战案例。",
  "publishedAt": "2025-01-22T00:00:00.000Z",
  "author": "hero",
  "category": "ai",
  "tags": [
    "python",
    "machine-learning",
    "jupyter",
    "knn",
    "scikit-learn"
  ],
  "featured": true,
  "published": true,
  "image": "/images/articles/python-ml-basics.jpg",
  "seoTitle": "Python 机器学习入门 - Jupyter 环境配置与 KNN 算法实战",
  "seoDescription": "学习 Python 机器学习基础，掌握 Jupyter Notebook 使用技巧和 KNN 算法实现",
  "seoKeywords": [
    "Python",
    "机器学习",
    "Jupyter",
    "KNN算法",
    "scikit-learn",
    "数据科学"
  ],
  "body": {
    "raw": "\n# Python 机器学习入门指南：从 Jupyter 环境到 KNN 算法实战\n\n本文将带您从零开始学习 Python 机器学习，涵盖 Jupyter Notebook 环境配置、机器学习基本概念，以及通过鸢尾花分类项目实战 KNN 算法。\n\n## 🚀 Jupyter Notebook 环境配置\n\n### 启动 Jupyter Notebook\n\n```bash\n# 启动 Jupyter Notebook\n/Users/a1-4/Library/Python/3.9/bin/jupyter notebook\n\n# 或者使用系统路径（如果已配置）\njupyter notebook\n```\n\n### Jupyter 基本操作\n\n#### Cell 单元格的两种模式\n\n**1. Code 模式**\n- 执行 CMD 命令：`!pip install numpy`\n- 执行 Python 代码：直接编写 Python 代码\n\n**2. Markdown 模式**\n- Markdown 标记语法\n- LaTeX 数学公式支持\n\n#### 快捷键操作\n\n**命令模式（ESC）**\n- `A`：在上方添加单元格\n- `B`：在下方添加单元格\n- `M`：切换至 Markdown 模式\n- `Y`：切换至 Code 模式\n- `DD`：删除当前单元格\n\n**编辑模式（Enter）**\n- `Ctrl + Enter`：执行当前单元格\n- `Shift + Enter`：执行当前单元格并移至下一行\n- `Tab`：代码补全\n- `Ctrl + /`：注释或取消注释\n- `Shift + Tab`：查看函数参数\n\n### 在线开发环境\n\n#### ModelScope 平台\n- **网址**：[modelscope.cn](https://modelscope.cn)\n- **配置步骤**：\n  1. 注册账号\n  2. 关联阿里云\n  3. 申请免费资源\n  4. 作为备用环境使用\n\n#### 笔记格式建议\n- 文本文件\n- Markdown 格式\n- 结构化组织\n\n#### AI 编程助手推荐\n- **TONGYI Lingma**（阿里）\n- **Baidu Comate**（百度）\n- **MarsCode**（字节跳动）\n\n---\n\n## 🧠 机器学习基本概念\n\n### 核心定义\n\n#### 基本术语\n- **算法**：计算机解决问题的抽象步骤和流程\n- **模型**：算法的具体代码实现\n\n#### 数学本质\n```\nX：样本特征（输入）\ny：样本标签（输出）\n目标：将 X 映射为 y，即 y = f(X)\n```\n\n### 机器学习项目流程\n\n#### Step 1：项目分析\n**关注外部特性**：\n- 输入是什么？\n- 输出是什么？\n- 是分类项目还是回归项目？\n\n#### Step 2：数据采集\n- 根据输入和输出构建数据集\n- **本质**：数理统计问题\n- 从总体中采集样本集，用样本统计量估计总体统计量\n- 采用分层采样方法\n\n**结构化数据特点**：\n- **每行一个样本**：独立同分布\n- **每列一个特征**：相互独立\n  - **离散型变量**：不同状态值（如高/低）\n  - **连续型变量**：如长度、深度等（例如长度 10.5 米）\n\n#### Step 3：数据预处理\n\n**数据清洗**：\n- 重复值处理\n- 缺失值处理\n- 异常值处理\n- 无效特征删除\n\n**数据切分**：\n- **训练集**：用于训练模型\n- **测试集**：用于评估模型\n- **验证集**：用于调参\n\n**特征工程**：\n- 特征提取\n- 特征选择\n- 特征降维\n\n#### Step 4：模型训练\n- 选择合适的模型\n- 进行模型训练\n\n#### Step 5：模型评估\n- 分类问题的评估指标\n- 回归问题的评估指标\n\n#### Step 6：模型调优\n- 调整超参数\n- 正则化\n- 交叉验证\n\n#### Step 7：模型应用\n- 模型的保存和加载\n- 模型的部署和应用\n\n---\n\n## 🌸 KNN 算法实战：鸢尾花分类\n\n### 项目分析\n\n#### 项目背景\n**鸢尾花识别（Iris Classification）**\n- **项目需求**：鸢尾花有 3 个子品种，通过机器学习算法进行分类预测\n- **任务**：给定一朵花，让模型识别是哪个子品种\n\n#### 输入输出定义\n**输入**：一朵花的数字化特征\n- 花萼长度（Sepal Length）\n- 花萼宽度（Sepal Width）\n- 花瓣长度（Petal Length）\n- 花瓣宽度（Petal Width）\n\n**输出**：子品种分类\n- Setosa（山鸢尾）\n- Versicolour（变色鸢尾）\n- Virginica（维吉尼亚鸢尾）\n\n### 数据采集\n\n#### 鸢尾花数据集特点\n- **总数据量**：150 条数据\n- **特征数量**：4 个特征\n- **标签数量**：3 个类别\n- **数据平衡性**：每个类别 50 个样本\n\n```python\n# 加载鸢尾花数据集\nfrom sklearn.datasets import load_iris\nimport pandas as pd\n\n# 加载数据\niris = load_iris()\nX = iris.data  # 特征数据\ny = iris.target  # 标签数据\n\n# 查看数据结构\nprint(\"特征名称:\", iris.feature_names)\nprint(\"标签名称:\", iris.target_names)\nprint(\"数据形状:\", X.shape)\n```\n\n### 数据预处理\n\n#### 数据切分\n```python\nfrom sklearn.model_selection import train_test_split\n\n# 数据切分：80% 训练集，20% 测试集\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, \n    test_size=0.2, \n    random_state=42,\n    stratify=y  # 分层采样，保持类别比例\n)\n\nprint(f\"训练集大小: {X_train.shape[0]}\")\nprint(f\"测试集大小: {X_test.shape[0]}\")\n```\n\n#### 特征工程\n- **特征提取**：已经提取好了（4 个数值特征）\n- **特征选择**：已经选择好了（所有特征都有用）\n- **特征降维**：不需要（特征数量较少）\n\n### 模型训练\n\n#### KNN 算法实现\n```python\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# 创建 KNN 分类器\nknn = KNeighborsClassifier(\n    n_neighbors=5,  # 邻居数量\n    weights='uniform',  # 权重方式\n    p=2  # 距离度量（欧几里得距离）\n)\n\n# 训练模型\nknn.fit(X=X_train, y=y_train)\n\n# 进行预测\ny_pred = knn.predict(X_test)\n```\n\n### 模型评估\n\n#### 准确率评估\n```python\nfrom sklearn.metrics import accuracy_score, classification_report\n\n# 计算准确率\naccuracy = accuracy_score(y_true=y_test, y_pred=y_pred)\nprint(f\"模型准确率: {accuracy:.4f}\")\n\n# 详细分类报告\nprint(\"\\n分类报告:\")\nprint(classification_report(y_test, y_pred, target_names=iris.target_names))\n```\n\n### 模型调优\n\n#### 超参数调优\n```python\nfrom sklearn.model_selection import GridSearchCV\n\n# 定义参数网格\nparam_grid = {\n    'n_neighbors': [3, 5, 7, 9, 11],\n    'weights': ['uniform', 'distance'],\n    'p': [1, 2]  # 1: 曼哈顿距离, 2: 欧几里得距离\n}\n\n# 网格搜索\ngrid_search = GridSearchCV(\n    KNeighborsClassifier(),\n    param_grid,\n    cv=5,  # 5 折交叉验证\n    scoring='accuracy'\n)\n\n# 执行搜索\ngrid_search.fit(X_train, y_train)\n\n# 最佳参数\nprint(\"最佳参数:\", grid_search.best_params_)\nprint(\"最佳得分:\", grid_search.best_score_)\n```\n\n### 模型应用\n\n#### 模型保存和加载\n```python\nimport joblib\n\n# 保存模型\njoblib.dump(value=knn, filename=\"knn_model.pkl\")\n\n# 加载模型\nloaded_model = joblib.load(filename=\"knn_model.pkl\")\n```\n\n#### 实际预测应用\n```python\ndef predict_iris_species(sepal_length, sepal_width, petal_length, petal_width):\n    \"\"\"预测鸢尾花品种\"\"\"\n    input_data = [[sepal_length, sepal_width, petal_length, petal_width]]\n    prediction = loaded_model.predict(input_data)\n    species_name = iris.target_names[prediction[0]]\n    return species_name\n\n# 示例预测\nresult = predict_iris_species(5.1, 3.5, 1.4, 0.2)\nprint(f\"预测品种: {result}\")\n```\n\n---\n\n## 🎯 学习总结\n\n### 关键知识点\n1. **Jupyter Notebook**：数据科学的标准开发环境\n2. **机器学习流程**：从问题分析到模型部署的完整流程\n3. **KNN 算法**：简单而有效的分类算法\n4. **模型评估**：准确率、分类报告等评估指标\n5. **超参数调优**：网格搜索和交叉验证\n\n### 实践技能\n- Jupyter Notebook 熟练使用\n- scikit-learn 库的基本操作\n- 数据预处理和特征工程\n- 模型训练、评估和调优\n- 模型保存和部署\n\n### 下一步学习建议\n1. 学习更多机器学习算法（决策树、随机森林、SVM 等）\n2. 深入理解特征工程和数据预处理\n3. 学习深度学习基础知识\n4. 实践更复杂的数据科学项目\n\n通过本文的学习，您已经掌握了 Python 机器学习的基础知识和实战技能。继续练习和探索，您将在数据科学的道路上越走越远！🚀\n",
    "html": "<h1>Python 机器学习入门指南：从 Jupyter 环境到 KNN 算法实战</h1>\n<p>本文将带您从零开始学习 Python 机器学习，涵盖 Jupyter Notebook 环境配置、机器学习基本概念，以及通过鸢尾花分类项目实战 KNN 算法。</p>\n<h2>🚀 Jupyter Notebook 环境配置</h2>\n<h3>启动 Jupyter Notebook</h3>\n<pre><code class=\"language-bash\"># 启动 Jupyter Notebook\n/Users/a1-4/Library/Python/3.9/bin/jupyter notebook\n\n# 或者使用系统路径（如果已配置）\njupyter notebook\n</code></pre>\n<h3>Jupyter 基本操作</h3>\n<h4>Cell 单元格的两种模式</h4>\n<p><strong>1. Code 模式</strong></p>\n<ul>\n<li>执行 CMD 命令：<code>!pip install numpy</code></li>\n<li>执行 Python 代码：直接编写 Python 代码</li>\n</ul>\n<p><strong>2. Markdown 模式</strong></p>\n<ul>\n<li>Markdown 标记语法</li>\n<li>LaTeX 数学公式支持</li>\n</ul>\n<h4>快捷键操作</h4>\n<p><strong>命令模式（ESC）</strong></p>\n<ul>\n<li><code>A</code>：在上方添加单元格</li>\n<li><code>B</code>：在下方添加单元格</li>\n<li><code>M</code>：切换至 Markdown 模式</li>\n<li><code>Y</code>：切换至 Code 模式</li>\n<li><code>DD</code>：删除当前单元格</li>\n</ul>\n<p><strong>编辑模式（Enter）</strong></p>\n<ul>\n<li><code>Ctrl + Enter</code>：执行当前单元格</li>\n<li><code>Shift + Enter</code>：执行当前单元格并移至下一行</li>\n<li><code>Tab</code>：代码补全</li>\n<li><code>Ctrl + /</code>：注释或取消注释</li>\n<li><code>Shift + Tab</code>：查看函数参数</li>\n</ul>\n<h3>在线开发环境</h3>\n<h4>ModelScope 平台</h4>\n<ul>\n<li><strong>网址</strong>：<a href=\"https://modelscope.cn\">modelscope.cn</a></li>\n<li><strong>配置步骤</strong>：\n<ol>\n<li>注册账号</li>\n<li>关联阿里云</li>\n<li>申请免费资源</li>\n<li>作为备用环境使用</li>\n</ol>\n</li>\n</ul>\n<h4>笔记格式建议</h4>\n<ul>\n<li>文本文件</li>\n<li>Markdown 格式</li>\n<li>结构化组织</li>\n</ul>\n<h4>AI 编程助手推荐</h4>\n<ul>\n<li><strong>TONGYI Lingma</strong>（阿里）</li>\n<li><strong>Baidu Comate</strong>（百度）</li>\n<li><strong>MarsCode</strong>（字节跳动）</li>\n</ul>\n<hr>\n<h2>🧠 机器学习基本概念</h2>\n<h3>核心定义</h3>\n<h4>基本术语</h4>\n<ul>\n<li><strong>算法</strong>：计算机解决问题的抽象步骤和流程</li>\n<li><strong>模型</strong>：算法的具体代码实现</li>\n</ul>\n<h4>数学本质</h4>\n<pre><code>X：样本特征（输入）\ny：样本标签（输出）\n目标：将 X 映射为 y，即 y = f(X)\n</code></pre>\n<h3>机器学习项目流程</h3>\n<h4>Step 1：项目分析</h4>\n<p><strong>关注外部特性</strong>：</p>\n<ul>\n<li>输入是什么？</li>\n<li>输出是什么？</li>\n<li>是分类项目还是回归项目？</li>\n</ul>\n<h4>Step 2：数据采集</h4>\n<ul>\n<li>根据输入和输出构建数据集</li>\n<li><strong>本质</strong>：数理统计问题</li>\n<li>从总体中采集样本集，用样本统计量估计总体统计量</li>\n<li>采用分层采样方法</li>\n</ul>\n<p><strong>结构化数据特点</strong>：</p>\n<ul>\n<li><strong>每行一个样本</strong>：独立同分布</li>\n<li><strong>每列一个特征</strong>：相互独立\n<ul>\n<li><strong>离散型变量</strong>：不同状态值（如高/低）</li>\n<li><strong>连续型变量</strong>：如长度、深度等（例如长度 10.5 米）</li>\n</ul>\n</li>\n</ul>\n<h4>Step 3：数据预处理</h4>\n<p><strong>数据清洗</strong>：</p>\n<ul>\n<li>重复值处理</li>\n<li>缺失值处理</li>\n<li>异常值处理</li>\n<li>无效特征删除</li>\n</ul>\n<p><strong>数据切分</strong>：</p>\n<ul>\n<li><strong>训练集</strong>：用于训练模型</li>\n<li><strong>测试集</strong>：用于评估模型</li>\n<li><strong>验证集</strong>：用于调参</li>\n</ul>\n<p><strong>特征工程</strong>：</p>\n<ul>\n<li>特征提取</li>\n<li>特征选择</li>\n<li>特征降维</li>\n</ul>\n<h4>Step 4：模型训练</h4>\n<ul>\n<li>选择合适的模型</li>\n<li>进行模型训练</li>\n</ul>\n<h4>Step 5：模型评估</h4>\n<ul>\n<li>分类问题的评估指标</li>\n<li>回归问题的评估指标</li>\n</ul>\n<h4>Step 6：模型调优</h4>\n<ul>\n<li>调整超参数</li>\n<li>正则化</li>\n<li>交叉验证</li>\n</ul>\n<h4>Step 7：模型应用</h4>\n<ul>\n<li>模型的保存和加载</li>\n<li>模型的部署和应用</li>\n</ul>\n<hr>\n<h2>🌸 KNN 算法实战：鸢尾花分类</h2>\n<h3>项目分析</h3>\n<h4>项目背景</h4>\n<p><strong>鸢尾花识别（Iris Classification）</strong></p>\n<ul>\n<li><strong>项目需求</strong>：鸢尾花有 3 个子品种，通过机器学习算法进行分类预测</li>\n<li><strong>任务</strong>：给定一朵花，让模型识别是哪个子品种</li>\n</ul>\n<h4>输入输出定义</h4>\n<p><strong>输入</strong>：一朵花的数字化特征</p>\n<ul>\n<li>花萼长度（Sepal Length）</li>\n<li>花萼宽度（Sepal Width）</li>\n<li>花瓣长度（Petal Length）</li>\n<li>花瓣宽度（Petal Width）</li>\n</ul>\n<p><strong>输出</strong>：子品种分类</p>\n<ul>\n<li>Setosa（山鸢尾）</li>\n<li>Versicolour（变色鸢尾）</li>\n<li>Virginica（维吉尼亚鸢尾）</li>\n</ul>\n<h3>数据采集</h3>\n<h4>鸢尾花数据集特点</h4>\n<ul>\n<li><strong>总数据量</strong>：150 条数据</li>\n<li><strong>特征数量</strong>：4 个特征</li>\n<li><strong>标签数量</strong>：3 个类别</li>\n<li><strong>数据平衡性</strong>：每个类别 50 个样本</li>\n</ul>\n<pre><code class=\"language-python\"># 加载鸢尾花数据集\nfrom sklearn.datasets import load_iris\nimport pandas as pd\n\n# 加载数据\niris = load_iris()\nX = iris.data  # 特征数据\ny = iris.target  # 标签数据\n\n# 查看数据结构\nprint(\"特征名称:\", iris.feature_names)\nprint(\"标签名称:\", iris.target_names)\nprint(\"数据形状:\", X.shape)\n</code></pre>\n<h3>数据预处理</h3>\n<h4>数据切分</h4>\n<pre><code class=\"language-python\">from sklearn.model_selection import train_test_split\n\n# 数据切分：80% 训练集，20% 测试集\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, \n    test_size=0.2, \n    random_state=42,\n    stratify=y  # 分层采样，保持类别比例\n)\n\nprint(f\"训练集大小: {X_train.shape[0]}\")\nprint(f\"测试集大小: {X_test.shape[0]}\")\n</code></pre>\n<h4>特征工程</h4>\n<ul>\n<li><strong>特征提取</strong>：已经提取好了（4 个数值特征）</li>\n<li><strong>特征选择</strong>：已经选择好了（所有特征都有用）</li>\n<li><strong>特征降维</strong>：不需要（特征数量较少）</li>\n</ul>\n<h3>模型训练</h3>\n<h4>KNN 算法实现</h4>\n<pre><code class=\"language-python\">from sklearn.neighbors import KNeighborsClassifier\n\n# 创建 KNN 分类器\nknn = KNeighborsClassifier(\n    n_neighbors=5,  # 邻居数量\n    weights='uniform',  # 权重方式\n    p=2  # 距离度量（欧几里得距离）\n)\n\n# 训练模型\nknn.fit(X=X_train, y=y_train)\n\n# 进行预测\ny_pred = knn.predict(X_test)\n</code></pre>\n<h3>模型评估</h3>\n<h4>准确率评估</h4>\n<pre><code class=\"language-python\">from sklearn.metrics import accuracy_score, classification_report\n\n# 计算准确率\naccuracy = accuracy_score(y_true=y_test, y_pred=y_pred)\nprint(f\"模型准确率: {accuracy:.4f}\")\n\n# 详细分类报告\nprint(\"\\n分类报告:\")\nprint(classification_report(y_test, y_pred, target_names=iris.target_names))\n</code></pre>\n<h3>模型调优</h3>\n<h4>超参数调优</h4>\n<pre><code class=\"language-python\">from sklearn.model_selection import GridSearchCV\n\n# 定义参数网格\nparam_grid = {\n    'n_neighbors': [3, 5, 7, 9, 11],\n    'weights': ['uniform', 'distance'],\n    'p': [1, 2]  # 1: 曼哈顿距离, 2: 欧几里得距离\n}\n\n# 网格搜索\ngrid_search = GridSearchCV(\n    KNeighborsClassifier(),\n    param_grid,\n    cv=5,  # 5 折交叉验证\n    scoring='accuracy'\n)\n\n# 执行搜索\ngrid_search.fit(X_train, y_train)\n\n# 最佳参数\nprint(\"最佳参数:\", grid_search.best_params_)\nprint(\"最佳得分:\", grid_search.best_score_)\n</code></pre>\n<h3>模型应用</h3>\n<h4>模型保存和加载</h4>\n<pre><code class=\"language-python\">import joblib\n\n# 保存模型\njoblib.dump(value=knn, filename=\"knn_model.pkl\")\n\n# 加载模型\nloaded_model = joblib.load(filename=\"knn_model.pkl\")\n</code></pre>\n<h4>实际预测应用</h4>\n<pre><code class=\"language-python\">def predict_iris_species(sepal_length, sepal_width, petal_length, petal_width):\n    \"\"\"预测鸢尾花品种\"\"\"\n    input_data = [[sepal_length, sepal_width, petal_length, petal_width]]\n    prediction = loaded_model.predict(input_data)\n    species_name = iris.target_names[prediction[0]]\n    return species_name\n\n# 示例预测\nresult = predict_iris_species(5.1, 3.5, 1.4, 0.2)\nprint(f\"预测品种: {result}\")\n</code></pre>\n<hr>\n<h2>🎯 学习总结</h2>\n<h3>关键知识点</h3>\n<ol>\n<li><strong>Jupyter Notebook</strong>：数据科学的标准开发环境</li>\n<li><strong>机器学习流程</strong>：从问题分析到模型部署的完整流程</li>\n<li><strong>KNN 算法</strong>：简单而有效的分类算法</li>\n<li><strong>模型评估</strong>：准确率、分类报告等评估指标</li>\n<li><strong>超参数调优</strong>：网格搜索和交叉验证</li>\n</ol>\n<h3>实践技能</h3>\n<ul>\n<li>Jupyter Notebook 熟练使用</li>\n<li>scikit-learn 库的基本操作</li>\n<li>数据预处理和特征工程</li>\n<li>模型训练、评估和调优</li>\n<li>模型保存和部署</li>\n</ul>\n<h3>下一步学习建议</h3>\n<ol>\n<li>学习更多机器学习算法（决策树、随机森林、SVM 等）</li>\n<li>深入理解特征工程和数据预处理</li>\n<li>学习深度学习基础知识</li>\n<li>实践更复杂的数据科学项目</li>\n</ol>\n<p>通过本文的学习，您已经掌握了 Python 机器学习的基础知识和实战技能。继续练习和探索，您将在数据科学的道路上越走越远！🚀</p>"
  },
  "_id": "articles/python-basic-codes.md",
  "_raw": {
    "sourceFilePath": "articles/python-basic-codes.md",
    "sourceFileName": "python-basic-codes.md",
    "sourceFileDir": "articles",
    "contentType": "markdown",
    "flattenedPath": "articles/python-basic-codes"
  },
  "type": "Article",
  "slug": "python-basic-codes",
  "readingTime": {
    "text": "9 min read",
    "minutes": 8.315,
    "time": 498900,
    "words": 1663
  },
  "url": "/articles/python-basic-codes"
}